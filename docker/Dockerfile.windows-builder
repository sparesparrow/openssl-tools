# escape=`
ARG WINDOWS_VERSION=ltsc2022
FROM mcr.microsoft.com/windows/servercore:${WINDOWS_VERSION} as base

# Install build tools via Chocolatey
RUN powershell -Command `
    Set-ExecutionPolicy Bypass -Scope Process -Force; `
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; `
    iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

RUN choco install -y `
    visualstudio2022buildtools `
    visualstudio2022-workload-vctools `
    python3 `
    perl `
    nasm `
    git

# Install Conan
RUN pip install conan==2.0.* && conan profile detect --force

# Build stage
FROM base as builder
ARG BUILD_TYPE=Release
ARG ENABLE_FIPS=ON

WORKDIR C:\src
COPY . .

# Configure and build
RUN mkdir build && cd build && `
    perl ..\Configure VC-WIN64A `
        --prefix=C:\openssl `
        --openssldir=C:\openssl\ssl `
        shared zlib `
        $(if ($env:ENABLE_FIPS -eq 'ON') { 'enable-fips' }) && `
    nmake && `
    nmake test && `
    nmake install DESTDIR=C:\install

# Create Conan package
RUN conan create . `
    --profile:build=default `
    --profile:host=default `
    -s build_type=${BUILD_TYPE} `
    -s compiler=msvc `
    -s compiler.version=193 `
    -o openssl:shared=True

# Artifact stage
FROM scratch as artifacts
COPY --from=builder C:\install C:\
COPY --from=builder C:\Users\ContainerAdministrator\.conan2\p\ C:\conan-packages\