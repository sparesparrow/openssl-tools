ARG UBUNTU_VERSION=22.04
FROM ubuntu:${UBUNTU_VERSION} as base

# Install build dependencies in single layer
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc-11 \
    g++-11 \
    clang-14 \
    cmake \
    ninja-build \
    perl \
    python3 \
    python3-pip \
    pkg-config \
    zlib1g-dev \
    libssl-dev \
    curl \
    git \
    ccache \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Conan
RUN pip3 install --no-cache-dir conan==2.0.* && \
    conan profile detect --force

# Build stage with optimizations
FROM base as builder
ARG COMPILER=gcc-11
ARG BUILD_TYPE=Release
ARG ENABLE_FIPS=ON

# Set build environment
ENV CCACHE_DIR=/tmp/ccache
ENV CCACHE_MAXSIZE=2G
ENV MAKEFLAGS="-j$(nproc)"

WORKDIR /src
COPY . .

# Create ccache directory
RUN mkdir -p /tmp/ccache

# Configure and build with optimizations
RUN rm -rf build && mkdir build && cd build && \
    if [ "$COMPILER" = "gcc-11" ]; then \
        export CC="ccache gcc-11" CXX="ccache g++-11"; \
    elif [ "$COMPILER" = "clang-14" ]; then \
        export CC="ccache clang-14" CXX="ccache clang++-14"; \
    fi && \
    ../openssl/Configure linux-x86_64 \
        --prefix=/opt/openssl \
        --openssldir=/opt/openssl/ssl \
        shared zlib \
        -O3 -DNDEBUG \
        $([ "$ENABLE_FIPS" = "ON" ] && echo "enable-fips") && \
    make -j$(nproc) && \
    make test && \
    make install DESTDIR=/install

# Create Conan package (simplified)
RUN conan create . \
    --profile:build=default \
    --profile:host=default \
    -s build_type=${BUILD_TYPE} \
    -s compiler=${COMPILER%%=*} \
    -s compiler.version=${COMPILER##*=} \
    -o openssl:shared=True \
    -o openssl:fPIC=True \
    --build=missing

# Artifact stage - minimal
FROM scratch as artifacts
COPY --from=builder /install /
COPY --from=builder /root/.conan2/p/ /conan-packages/