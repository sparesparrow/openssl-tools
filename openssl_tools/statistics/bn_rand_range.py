#!/usr/bin/env python3
"""
OpenSSL BN Rand Range Tool - Python Implementation
Generate statistical test data for BN_rand_range
"""

import os
import sys
import argparse
import logging
from typing import List, Optional, Dict, Any
from pathlib import Path
import json
from datetime import datetime

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

try:
    from scipy.stats import chi2, binom
    SCIPY_AVAILABLE = True
except ImportError:
    SCIPY_AVAILABLE = False
    logger.warning("scipy not available, using fallback calculations")


class BnRandRangeTool:
    """Generate statistical test data for BN_rand_range"""
    
    def __init__(self, config_path: Optional[str] = None):
        """Initialize the BN Rand Range tool"""
        self.config = self._load_config(config_path)
        
    def _load_config(self, config_path: Optional[str] = None) -> Dict[str, Any]:
        """Load configuration from file or environment"""
        if config_path and os.path.exists(config_path):
            with open(config_path, 'r') as f:
                return json.load(f)
        
        # Default configuration
        return {
            'tools': {
                'statistics': {
                    'alpha_chi2': 0.95,
                    'alpha_binomial': 0.9999,
                    'test_cases': list(range(2, 20)) + 
                                [x * 10 + 10 for x in range(1, 10)] + 
                                [x * 1000 for x in range(1, 11)]
                }
            }
        }
    
    def parse_arguments(self, args: List[str]) -> argparse.Namespace:
        """Parse command line arguments"""
        parser = argparse.ArgumentParser(
            description='Generate statistical test data for BN_rand_range',
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog="""
Examples:
  bn-rand-range --output=test/bn_rand_range.h
  bn-rand-range --alpha-chi2=0.99 --alpha-binomial=0.999
            """
        )
        
        parser.add_argument('--output', '-o', help='Output file path')
        parser.add_argument('--alpha-chi2', type=float, default=0.95, 
                          help='Alpha value for chi-square test')
        parser.add_argument('--alpha-binomial', type=float, default=0.9999,
                          help='Alpha value for binomial test')
        parser.add_argument('--test-cases', nargs='+', type=int,
                          help='Test cases to generate')
        parser.add_argument('--verbose', action='store_true', help='Verbose output')
        
        return parser.parse_args(args)
    
    def calculate_chi2_critical(self, n: int, alpha: float) -> float:
        """Calculate chi-square critical value"""
        if SCIPY_AVAILABLE:
            return chi2.ppf(alpha, n - 1)
        else:
            # Fallback calculation (simplified)
            # This is a very basic approximation
            return (n - 1) * (1 + 2 * (1 - alpha))
    
    def calculate_binomial_critical(self, n_cases: int, alpha_chi2: float, alpha_binomial: float) -> int:
        """Calculate binomial critical value"""
        if SCIPY_AVAILABLE:
            return int(binom.isf(alpha_binomial, n_cases, alpha_chi2))
        else:
            # Fallback calculation (simplified)
            return int(n_cases * alpha_chi2)
    
    def generate_test_cases(self, test_cases: List[int], alpha_chi2: float) -> List[Dict[str, Any]]:
        """Generate test cases"""
        cases = []
        
        for n in test_cases:
            iterations = n * (100 if n < 1000 else 10)
            critical = self.calculate_chi2_critical(n, alpha_chi2)
            
            cases.append({
                'range': n,
                'iterations': iterations,
                'critical': critical
            })
        
        return cases
    
    def generate_header_file(self, cases: List[Dict[str, Any]], alpha_chi2: float, 
                           alpha_binomial: float, output_path: str) -> None:
        """Generate C header file"""
        # Calculate binomial critical value
        binomial_critical = self.calculate_binomial_critical(len(cases), alpha_chi2, alpha_binomial)
        
        # Get copyright year
        current_year = datetime.now().year
        if current_year != 2019:
            copyright_year = f"2019-{current_year}"
        else:
            copyright_year = "2019"
        
        # Generate header content
        header_content = f"""/*
 * WARNING: do not edit!
 * Generated by statistics/bn_rand_range.py in the OpenSSL tool repository.
 *
 * Copyright {copyright_year} The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

static const struct {{
    unsigned int range;
    unsigned int iterations;
    double critical;
}} rand_range_cases[] = {{"""
        
        # Add test cases
        for case in cases:
            range_val = case['range']
            iterations = case['iterations']
            critical = case['critical']
            header_content += """
    {{ {range_val:6d}, {iterations:8d}, {critical:12f }},""".format(
                range_val=range_val, iterations=iterations, critical=critical
            )
        
        header_content += f"""
}};

static const int binomial_critical = {binomial_critical};
"""
        
        # Write to file
        with open(output_path, 'w') as f:
            f.write(header_content)
        
        logger.info(f"Generated header file: {output_path}")
    
    def run(self, args: List[str]) -> int:
        """Main entry point"""
        try:
            parsed_args = self.parse_arguments(args)
            
            # Get configuration
            alpha_chi2 = parsed_args.alpha_chi2
            alpha_binomial = parsed_args.alpha_binomial
            test_cases = parsed_args.test_cases or self.config['tools']['statistics']['test_cases']
            
            logger.info(f"Generating test cases with alpha_chi2={alpha_chi2}, alpha_binomial={alpha_binomial}")
            logger.info(f"Test cases: {test_cases}")
            
            # Generate test cases
            cases = self.generate_test_cases(test_cases, alpha_chi2)
            
            if parsed_args.verbose:
                logger.info("Generated test cases:")
                for case in cases:
                    logger.info(f"  Range: {case['range']}, Iterations: {case['iterations']}, Critical: {case['critical']:.6f}")
            
            # Generate header file
            if parsed_args.output:
                self.generate_header_file(cases, alpha_chi2, alpha_binomial, parsed_args.output)
            else:
                # Output to stdout
                self.generate_header_file(cases, alpha_chi2, alpha_binomial, '/dev/stdout')
            
            return 0
            
        except KeyboardInterrupt:
            logger.info("Interrupted by user")
            return 1
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            return 1


def main():
    """Main entry point for command line usage"""
    tool = BnRandRangeTool()
    sys.exit(tool.run(sys.argv[1:]))


if __name__ == '__main__':
    main()