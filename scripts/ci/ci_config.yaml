# OpenSSL CI/CD Configuration
# Based on ngapy-dev patterns for robust CI/CD automation

version: "1.0"

# Build configuration
build:
  build_root: ${ENV_REPOSITORY_ROOT}/_Build
  source_root: ${build.build_root}/SOURCE
  product_root: ${build.source_root}/Product
  tools_root: ${build.build_root}/TOOLS
  
  # Build optimization settings
  build_threads: -1  # Use all available cores
  parallel_download: -1  # Use all available cores for downloads
  
  # Platform-specific build settings
  linux:
    compiler_paths: [
      "/usr/bin/gcc",
      "/usr/bin/g++",
      "/usr/bin/clang",
      "/usr/bin/clang++"
    ]
    build_tools: ["make", "cmake", "perl"]
    
  windows:
    compiler_paths: [
      "C:/Program Files/Microsoft Visual Studio/2022/Professional/MSBuild/Current/Bin/MSBuild.exe",
      "C:/Program Files/Microsoft Visual Studio/2022/Community/MSBuild/Current/Bin/MSBuild.exe"
    ]
    build_tools: ["nasm", "strawberryperl"]
    
  macos:
    compiler_paths: [
      "/usr/bin/clang",
      "/usr/bin/clang++"
    ]
    build_tools: ["make", "cmake", "perl"]

# Conan configuration
conan:
  # Remote repositories
  remotes:
    - name: "conancenter"
      url: "https://center.conan.io"
      enabled: true
    - name: "openssl-dev"
      url: "https://api.bintray.com/conan/openssl/openssl"
      enabled: false  # Enable when needed
      
  # Cache configuration
  cache:
    home: "${CONAN_USER_HOME:-~/.conan2}"
    max_size: "5GB"
    cleanup_interval: "7d"
    
  # Build profiles
  profiles:
    - name: "hermetic-linux-gcc11"
      settings:
        os: "Linux"
        compiler: "gcc"
        compiler.version: "11"
        compiler.libcxx: "libstdc++11"
        build_type: "Release"
        arch: "x86_64"
        
    - name: "hermetic-linux-clang15"
      settings:
        os: "Linux"
        compiler: "clang"
        compiler.version: "15"
        compiler.libcxx: "libstdc++11"
        build_type: "Release"
        arch: "x86_64"
        
    - name: "windows-vs2022"
      settings:
        os: "Windows"
        compiler: "msvc"
        compiler.version: "193"
        compiler.runtime: "dynamic"
        build_type: "Release"
        arch: "x86_64"
        
    - name: "macos-clang14"
      settings:
        os: "Macos"
        compiler: "clang"
        compiler.version: "14"
        compiler.libcxx: "libc++"
        build_type: "Release"
        arch: "x86_64"

# Testing configuration
testing:
  # Test frameworks
  frameworks:
    - name: "unit_tests"
      enabled: true
      command: "make test"
      timeout: "30m"
      
    - name: "integration_tests"
      enabled: true
      command: "make test_integration"
      timeout: "60m"
      
    - name: "performance_tests"
      enabled: false  # Enable for performance builds
      command: "make test_performance"
      timeout: "120m"
      
  # Test reporting
  reporting:
    junit_xml: true
    coverage_report: true
    test_results_dir: "${build.build_root}/test_results"
    
  # Test data management
  test_data:
    fixtures_dir: "test/fixtures"
    cleanup_after_tests: true

# Security configuration
security:
  # Vulnerability scanning
  vulnerability_scanning:
    enabled: true
    tools: ["trivy", "grype"]
    scan_targets: ["package", "dependencies"]
    
  # SBOM generation
  sbom:
    enabled: true
    format: "cyclonedx"
    output_path: "${build.build_root}/sbom.json"
    
  # License compliance
  license_compliance:
    enabled: true
    approved_licenses: [
      "Apache-2.0", "MIT", "BSD-3-Clause", "BSD-2-Clause",
      "ISC", "Zlib", "OpenSSL"
    ]

# Monitoring and observability
monitoring:
  # Build metrics
  build_metrics:
    enabled: true
    collect:
      - "build_time"
      - "cache_hit_rate"
      - "memory_usage"
      - "disk_usage"
      
  # Quality metrics
  quality_metrics:
    enabled: true
    collect:
      - "test_coverage"
      - "code_quality"
      - "security_scan_results"
      
  # Alerting
  alerting:
    enabled: true
    channels: ["email", "slack"]
    thresholds:
      build_time: "2h"
      test_failure_rate: "10%"
      security_issues: "1"

# CI/CD pipeline configuration
pipeline:
  # Pipeline stages
  stages:
    - name: "validate"
      parallel: true
      jobs: ["lint", "security_scan", "dependency_check"]
      
    - name: "build"
      parallel: true
      jobs: ["build_linux", "build_windows", "build_macos"]
      
    - name: "test"
      parallel: true
      jobs: ["unit_tests", "integration_tests"]
      
    - name: "package"
      jobs: ["create_package", "upload_artifacts"]
      
    - name: "deploy"
      jobs: ["deploy_staging", "deploy_production"]
      
  # Environment-specific configurations
  environments:
    development:
      conan_profile: "hermetic-linux-gcc11"
      test_level: "unit"
      security_scan: "basic"
      
    staging:
      conan_profile: "hermetic-linux-gcc11"
      test_level: "full"
      security_scan: "comprehensive"
      
    production:
      conan_profile: "hermetic-linux-gcc11"
      test_level: "full"
      security_scan: "comprehensive"
      fips_mode: true

# Logging configuration
logging:
  level: "INFO"
  format: "json"
  outputs:
    - type: "file"
      path: "${build.build_root}/logs/ci.log"
    - type: "console"
      enabled: true
      
  # Log filtering (based on ngapy-dev patterns)
  filters:
    whitelist:
      - "INFO.*Build completed successfully"
      - "INFO.*Test passed"
      - "WARN.*Using cached package"
    blacklist:
      - "DEBUG.*"
      - "WARN.*Deprecated"
