#!/usr/bin/env python3
"""
Build and Upload Python Environment Package
Creates a Conan package for the OpenSSL Python development environment
"""

import argparse
import os
import sys
import subprocess
import tempfile
from pathlib import Path
from typing import Optional


class PythonEnvironmentBuilder:
    """Builds and uploads Python environment packages to Conan/Artifactory."""
    
    def __init__(self, python_version: str = "3.12", package_version: str = "latest"):
        self.python_version = python_version
        self.package_version = package_version
        self.repo_root = Path(__file__).parent.parent
        
    def create_conanfile(self, include_dev_tools: bool = True, include_testing: bool = True) -> str:
        """Create the Conan recipe for the Python environment package."""
        return f'''from conan import ConanFile
from conan.tools.files import copy, save
import os
import sys
from pathlib import Path

class PythonEnvironmentConan(ConanFile):
    name = "openssl-python-environment"
    version = "{self.package_version}"
    description = "OpenSSL Python development environment with Conan tools"
    license = "Apache-2.0"
    url = "https://github.com/openssl/openssl"
    homepage = "https://www.openssl.org"
    topics = ("openssl", "python", "conan", "development", "environment")
    
    settings = "os", "arch", "compiler", "build_type"
    options = {{
        "python_version": ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"],
        "include_dev_tools": [True, False],
        "include_testing": [True, False],
    }}
    default_options = {{
        "python_version": "{self.python_version}",
        "include_dev_tools": {str(include_dev_tools).lower()},
        "include_testing": {str(include_testing).lower()},
    }}
    
    def requirements(self):
        # Require OpenSSL if available
        try:
            self.requires("openssl/3.5.0")
        except:
            pass  # OpenSSL not required for Python environment
        
    def build_requirements(self):
        if self.options.include_dev_tools:
            self.tool_requires("cmake/[>=3.15]")
            self.tool_requires("ninja/[>=1.10]")
            self.tool_requires("pkgconf/[>=1.7]")
    
    def generate(self):
        # Create Python environment setup script
        python_setup = f'''#!/usr/bin/env python{self.python_version}
"""
        OpenSSL Python Environment Setup
        Generated by Conan package openssl-python-environment/{self.package_version}
        """
        
        import os
        import sys
        import subprocess
        from pathlib import Path
        
        def setup_environment():
            \"\"\"Set up the OpenSSL Python development environment.\"\"\"
            print("[PYTHON] Setting up OpenSSL Python environment...")
            
            # Get the package directory
            package_dir = Path(__file__).parent
            python_exe = sys.executable
            
            # Install required packages
            requirements = [
                "conan>=2.0.0",
                "PyYAML",
                "pytest",
                "pytest-cov",
                "coverage",
                "black",
                "flake8",
                "pylint",
                "mypy",
                "isort",
                "markdown-it",
                "normalizer",
                "distro"
            ]
            
            if {str(include_testing).lower()}:
                requirements.extend([
                    "pytest-xdist",
                    "pytest-mock",
                    "pytest-benchmark"
                ])
            
            for package in requirements:
                try:
                    subprocess.run([python_exe, "-m", "pip", "install", package], 
                                 check=True, capture_output=True)
                    print(f"[OK] Installed {{package}}")
                except subprocess.CalledProcessError as e:
                    print(f"[WARN] Warning: Failed to install {{package}}: {{e}}")
            
            # Set up environment variables
            os.environ['PYTHON_APPLICATION'] = python_exe
            os.environ['CONAN_COLOR_DISPLAY'] = '1'
            os.environ['CLICOLOR_FORCE'] = '1'
            os.environ['CLICOLOR'] = '1'
            
            print("[SUCCESS] OpenSSL Python environment setup complete!")
            print(f"Python executable: {{python_exe}}")
            print(f"Package version: {self.package_version}")
        
        if __name__ == "__main__":
            setup_environment()
        """
        
        # Save the setup script
        save(self, "bin/setup_environment.py", python_setup)
        
        # Create a simple README
        readme = f"""# OpenSSL Python Environment {self.package_version}

This package provides a complete Python development environment for OpenSSL development with Conan integration.

## Features
- Python {self.python_version}
- Conan package manager
- Development tools: black, flake8, pylint, mypy, isort
- Testing tools: pytest, pytest-cov, coverage
- OpenSSL integration scripts

## Usage

After installing this package, run:
```bash
python bin/setup_environment.py
```

This will set up your Python environment with all required tools.

## Platform
- OS: {{self.settings.os}}
- Architecture: {{self.settings.arch}}
- Compiler: {{self.settings.compiler}}
- Build Type: {{self.settings.build_type}}
"""
        
        save(self, "README.md", readme)
        
        # Create a requirements.txt
        requirements_txt = f"""# OpenSSL Python Environment Requirements
# Generated by openssl-python-environment/{self.package_version}

conan>=2.0.0
PyYAML
pytest
pytest-cov
coverage
black
flake8
pylint
mypy
isort
markdown-it
normalizer
distro
"""
        
        if include_testing:
            requirements_txt += """
pytest-xdist
pytest-mock
pytest-benchmark
"""
        
        save(self, "requirements.txt", requirements_txt)
    
    def package(self):
        # Copy the generated files
        copy(self, "bin/setup_environment.py", self.build_folder, "bin")
        copy(self, "README.md", self.build_folder, ".")
        copy(self, "requirements.txt", self.build_folder, ".")
        
        # Copy OpenSSL Conan scripts if they exist
        if Path("scripts/openssl_conan").exists():
            copy(self, "scripts/openssl_conan/**", self.build_folder, "scripts/openssl_conan")
        
        # Copy Conan profiles if they exist
        if Path("conan-dev/profiles").exists():
            copy(self, "conan-dev/profiles/**", self.build_folder, "conan-dev/profiles")
    
    def package_info(self):
        self.cpp_info.libs = []
        self.cpp_info.includedirs = []
        self.cpp_info.libdirs = []
        
        # Set environment variables
        self.runenv_info.define("PYTHON_APPLICATION", sys.executable)
        self.runenv_info.define("CONAN_COLOR_DISPLAY", "1")
        self.runenv_info.define("CLICOLOR_FORCE", "1")
        self.runenv_info.define("CLICOLOR", "1")
'''
    
    def build_package(self, profile: str = "default", include_dev_tools: bool = True, include_testing: bool = True) -> bool:
        """Build the Python environment package."""
        print(f"üî® Building Python environment package...")
        print(f"   Python version: {self.python_version}")
        print(f"   Package version: {self.package_version}")
        print(f"   Profile: {profile}")
        print(f"   Dev tools: {include_dev_tools}")
        print(f"   Testing tools: {include_testing}")
        
        # Create temporary directory for the conanfile
        with tempfile.TemporaryDirectory() as temp_dir:
            conanfile_path = Path(temp_dir) / "conanfile.py"
            conanfile_path.write_text(self.create_conanfile(include_dev_tools, include_testing))
            
            # Build the package
            cmd = [
                "conan", "create", str(conanfile_path),
                "--profile", profile,
                "--build", "missing"
            ]
            
            try:
                result = subprocess.run(cmd, check=True, capture_output=True, text=True)
                print("[OK] Package built successfully!")
                return True
            except subprocess.CalledProcessError as e:
                print(f"[ERROR] Build failed: {e}")
                print(f"stdout: {e.stdout}")
                print(f"stderr: {e.stderr}")
                return False
    
    def upload_package(self, remote: str = "conancenter", user: str = "openssl", channel: str = "stable") -> bool:
        """Upload the package to a Conan remote."""
        print(f"üì§ Uploading package to {remote}...")
        
        package_ref = f"openssl-python-environment/{self.package_version}@{user}/{channel}"
        
        cmd = [
            "conan", "upload", package_ref,
            "-r", remote,
            "--all", "--confirm"
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True)
            print(f"[OK] Package uploaded successfully to {remote}!")
            print(f"Package reference: {package_ref}")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Upload failed: {e}")
            print(f"stdout: {e.stdout}")
            print(f"stderr: {e.stderr}")
            return False
    
    def setup_artifactory_remote(self, artifactory_url: str, username: str, password: str, repo_name: str = "conan-local") -> bool:
        """Set up Artifactory remote."""
        print(f"üîß Setting up Artifactory remote...")
        
        # Add remote
        add_cmd = ["conan", "remote", "add", "artifactory", f"{artifactory_url}/{repo_name}"]
        try:
            subprocess.run(add_cmd, check=True, capture_output=True)
            print("‚úÖ Artifactory remote added")
        except subprocess.CalledProcessError:
            print("‚ÑπÔ∏è  Remote already exists or failed to add")
        
        # Set credentials
        auth_cmd = ["conan", "user", "-p", password, "-r", "artifactory", username]
        try:
            subprocess.run(auth_cmd, check=True, capture_output=True)
            print("‚úÖ Artifactory credentials set")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Failed to set Artifactory credentials: {e}")
            return False


def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(description="Build and upload OpenSSL Python environment package")
    parser.add_argument("--python-version", default="3.12", help="Python version to package")
    parser.add_argument("--package-version", default="latest", help="Package version")
    parser.add_argument("--profile", default="default", help="Conan profile to use")
    parser.add_argument("--remote", default="conancenter", help="Conan remote to upload to")
    parser.add_argument("--user", default="openssl", help="Conan user")
    parser.add_argument("--channel", default="stable", help="Conan channel")
    parser.add_argument("--no-dev-tools", action="store_true", help="Exclude development tools")
    parser.add_argument("--no-testing", action="store_true", help="Exclude testing tools")
    parser.add_argument("--artifactory-url", help="Artifactory URL")
    parser.add_argument("--artifactory-username", help="Artifactory username")
    parser.add_argument("--artifactory-password", help="Artifactory password")
    parser.add_argument("--artifactory-repo", default="conan-local", help="Artifactory repository name")
    parser.add_argument("--build-only", action="store_true", help="Only build, don't upload")
    
    args = parser.parse_args()
    
    # Create builder
    builder = PythonEnvironmentBuilder(args.python_version, args.package_version)
    
    # Build package
    success = builder.build_package(
        profile=args.profile,
        include_dev_tools=not args.no_dev_tools,
        include_testing=not args.no_testing
    )
    
    if not success:
        print("‚ùå Build failed, exiting")
        sys.exit(1)
    
    if args.build_only:
        print("‚úÖ Build completed (upload skipped)")
        sys.exit(0)
    
    # Set up Artifactory if provided
    if args.artifactory_url and args.artifactory_username and args.artifactory_password:
        success = builder.setup_artifactory_remote(
            args.artifactory_url,
            args.artifactory_username,
            args.artifactory_password,
            args.artifactory_repo
        )
        if success:
            args.remote = "artifactory"
    
    # Upload package
    success = builder.upload_package(
        remote=args.remote,
        user=args.user,
        channel=args.channel
    )
    
    if success:
        print("üéâ Package build and upload completed successfully!")
        print(f"Install with: conan install openssl-python-environment/{args.package_version}@{args.user}/{args.channel}")
    else:
        print("‚ùå Upload failed")
        sys.exit(1)


if __name__ == "__main__":
    main()