[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "openssl-tools"
version = "1.0.0"
description = "OpenSSL development and build tools with Python environment management, Conan integration, and fuzzing support"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "sparesparrow", email = "sparesparrow@example.com"}
]
maintainers = [
    {name = "sparesparrow", email = "sparesparrow@example.com"}
]
keywords = ["openssl", "cryptography", "build-tools", "conan", "fuzzing", "python"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Build Tools",
    "Topic :: Security :: Cryptography",
    "Topic :: Software Development :: Testing",
]
requires-python = ">=3.8"
dependencies = [
    "conan>=2.0.17",
    "requests>=2.28.0",
    "cryptography>=3.4.8",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "atheris>=2.0.0",
    "hypothesis>=6.0.0",
    "pyperf>=2.0.0",
    "psutil>=5.9.0",
    "memory-profiler>=0.60.0",
]

[project.optional-dependencies]
dev = [
    "pre-commit>=2.20.0",
    "isort>=5.10.0",
    "pylint>=2.15.0",
    "pytest-xdist>=2.5.0",
    "pytest-mock>=3.8.0",
    "pytest-benchmark>=4.0.0",
    "coverage>=6.5.0",
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.15.0",
    "types-requests>=2.28.0",
    "types-cryptography>=3.4.0",
]
fuzzing = [
    "atheris>=2.0.0",
    "hypothesis>=6.0.0",
    "fuzzingbook>=1.0.0",
]
security = [
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "semgrep>=1.0.0",
]
performance = [
    "pyperf>=2.0.0",
    "psutil>=5.9.0",
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
    "py-spy>=0.3.0",
]

[project.urls]
Homepage = "https://github.com/sparesparrow/openssl-tools"
Documentation = "https://openssl-tools.readthedocs.io"
Repository = "https://github.com/sparesparrow/openssl-tools.git"
Issues = "https://github.com/sparesparrow/openssl-tools/issues"
Changelog = "https://github.com/sparesparrow/openssl-tools/blob/main/CHANGELOG.md"

[project.scripts]
openssl-tools = "openssl_tools.foundation.command_line.main:main"
openssl-env = "openssl_tools.environment.setup:main"
openssl-workflow = "openssl_tools.automation.workflow_management.manager:main"
openssl-build = "openssl_tools.development.build_system.optimizer:main"
openssl-conan = "openssl_tools.development.package_management.remote_manager:main"
openssl-validate = "openssl_tools.foundation.utilities.validation:main"
openssl-security = "openssl_tools.security.build_validation:main"
openssl-test = "openssl_tools.testing.test_harness:main"
openssl-monitor = "openssl_tools.monitoring.status_reporter:main"
openssl-sbom = "openssl_tools.security.sbom_generator:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["openssl_tools*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
"openssl_tools" = ["*.py", "*.yml", "*.yaml", "*.json", "*.md"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["openssl_tools"]
known_third_party = ["conan", "requests", "cryptography", "pytest"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "conan.*",
    "atheris.*",
    "hypothesis.*",
    "pyperf.*",
    "psutil.*",
    "memory_profiler.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "fuzzing: marks tests as fuzzing tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "docs/*",
    "examples/*",
    "setup.py",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    ".venv/*",
    ".env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "docs", "examples"]
skips = ["B101", "B601"]

# Flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".env",
    "venv",
    "env",
]