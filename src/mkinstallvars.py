#!/usr/bin/env python3
"""
OpenSSL Installation Variables Generator - Python replacement for mkinstallvars.pl

Generates installation variables and configuration.
"""

import argparse
import os
import sys
from pathlib import Path
from typing import Dict, List, Optional, Any


class InstallVarsGenerator:
    """Generates OpenSSL installation variables and configuration."""

    def __init__(self):
        self.debug = False
        self.quiet = False
        self.output_file: Optional[str] = None
        self.template_file: Optional[str] = None

        # Installation configuration
        self.install_vars: Dict[str, Any] = {
            'prefix': '/usr/local/ssl',
            'openssldir': '/usr/local/ssl',
            'libdir': 'lib',
            'includedir': 'include',
            'bindir': 'bin',
            'mandir': 'share/man',
            'enginesdir': 'lib/engines',
            'modulesdir': 'lib/ossl-modules',
            'pkgconfigdir': 'lib/pkgconfig',

            # Version information
            'version': '3.4.1',
            'major': '3',
            'minor': '4',
            'patch': '1',

            # Build configuration
            'shared': False,
            'fips': False,
            'threads': True,
            'asm': True,
            'compiler': 'gcc',

            # Platform information
            'platform': sys.platform,
            'arch': os.uname().machine if hasattr(os, 'uname') else 'unknown',
        }

    def set_install_prefix(self, prefix: str) -> None:
        """Set the installation prefix."""
        self.install_vars['prefix'] = prefix
        self.install_vars['openssldir'] = prefix

    def set_openssl_dir(self, openssldir: str) -> None:
        """Set the OpenSSL directory."""
        self.install_vars['openssldir'] = openssldir

    def enable_shared(self, enabled: bool = True) -> None:
        """Enable or disable shared library building."""
        self.install_vars['shared'] = enabled

    def enable_fips(self, enabled: bool = True) -> None:
        """Enable or disable FIPS mode."""
        self.install_vars['fips'] = enabled

    def set_version(self, version: str) -> None:
        """Set the OpenSSL version."""
        self.install_vars['version'] = version

        # Parse version components
        parts = version.split('.')
        if len(parts) >= 1:
            self.install_vars['major'] = parts[0]
        if len(parts) >= 2:
            self.install_vars['minor'] = parts[1]
        if len(parts) >= 3:
            self.install_vars['patch'] = parts[2]

    def generate_makefile_vars(self, output_file: str) -> None:
        """Generate Makefile variables."""
        with open(output_file, 'w') as f:
            f.write("# Generated installation variables\n")
            f.write("# Do not edit manually - generated by mkinstallvars.py\n\n")

            for key, value in sorted(self.install_vars.items()):
                if isinstance(value, bool):
                    str_value = 'yes' if value else 'no'
                elif isinstance(value, str):
                    str_value = f'"{value}"'
                else:
                    str_value = str(value)

                f.write(f"{key.upper()} = {str_value}\n")

        if not self.quiet:
            print(f"Generated Makefile variables: {output_file}")

    def generate_pkgconfig_file(self, output_file: str) -> None:
        """Generate pkg-config file."""
        with open(output_file, 'w') as f:
            f.write("# Generated pkg-config file\n")
            f.write("# Do not edit manually - generated by mkinstallvars.py\n\n")

            prefix = self.install_vars['prefix']
            version = self.install_vars['version']

            f.write(f"prefix={prefix}\n")
            f.write(f"exec_prefix=${{prefix}}\n")
            f.write(f"libdir=${{prefix}}/{self.install_vars['libdir']}\n")
            f.write(f"includedir=${{prefix}}/{self.install_vars['includedir']}\n")
            f.write("\n")
            f.write("Name: OpenSSL\n")
            f.write(f"Description: Secure Sockets Layer and cryptography libraries and tools\n")
            f.write(f"Version: {version}\n")
            f.write("Requires:\n")
            f.write("Libs: -L${libdir} -lssl -lcrypto\n")
            f.write("Cflags: -I${includedir}\n")

        if not self.quiet:
            print(f"Generated pkg-config file: {output_file}")

    def generate_install_script(self, output_file: str) -> None:
        """Generate installation script."""
        with open(output_file, 'w') as f:
            f.write("#!/bin/bash\n")
            f.write("# Generated installation script\n")
            f.write("# Do not edit manually - generated by mkinstallvars.py\n\n")

            f.write("set -e\n\n")

            prefix = self.install_vars['prefix']
            openssldir = self.install_vars['openssldir']

            f.write(f"PREFIX=\"{prefix}\"\n")
            f.write(f"OPENSSLDIR=\"{openssldir}\"\n\n")

            f.write("# Create installation directories\n")
            f.write("mkdir -p \"$PREFIX\"/bin\n")
            f.write("mkdir -p \"$PREFIX\"/include\n")
            f.write("mkdir -p \"$PREFIX\"/lib\n")
            f.write("mkdir -p \"$PREFIX\"/share/man\n")
            f.write("mkdir -p \"$OPENSSLDIR\"\n\n")

            if self.install_vars['fips']:
                f.write("# Create FIPS module directory\n")
                f.write("mkdir -p \"$PREFIX\"/lib/ossl-modules\n\n")

            f.write("echo \"Installation directories created successfully\"\n")

        if not self.quiet:
            print(f"Generated installation script: {output_file}")

        # Make the script executable
        os.chmod(output_file, 0o755)

    def process_template(self, template_file: str, output_file: str) -> None:
        """Process a template file with variable substitution."""
        if not os.path.exists(template_file):
            print(f"Template file not found: {template_file}", file=sys.stderr)
            return

        with open(template_file, 'r') as f:
            template_content = f.read()

        # Perform variable substitution
        result = template_content
        for key, value in self.install_vars.items():
            if isinstance(value, bool):
                str_value = '1' if value else '0'
            else:
                str_value = str(value)

            result = result.replace(f"@{key.upper()}@", str_value)

        with open(output_file, 'w') as f:
            f.write(result)

        if not self.quiet:
            print(f"Processed template: {template_file} -> {output_file}")

    def run(self, args: List[str]) -> int:
        """Main execution method."""
        parser = argparse.ArgumentParser(description='Generate OpenSSL installation variables')
        parser.add_argument('-d', '--debug', action='store_true',
                          help='Enable debug output')
        parser.add_argument('-q', '--quiet', action='store_true',
                          help='Suppress non-error output')
        parser.add_argument('-o', '--output', type=str,
                          help='Output file')
        parser.add_argument('--prefix', type=str,
                          help='Installation prefix')
        parser.add_argument('--openssldir', type=str,
                          help='OpenSSL directory')
        parser.add_argument('--shared', action='store_true',
                          help='Enable shared libraries')
        parser.add_argument('--fips', action='store_true',
                          help='Enable FIPS mode')
        parser.add_argument('--version', type=str,
                          help='OpenSSL version')
        parser.add_argument('--makefile-vars', action='store_true',
                          help='Generate Makefile variables')
        parser.add_argument('--pkgconfig', action='store_true',
                          help='Generate pkg-config file')
        parser.add_argument('--install-script', action='store_true',
                          help='Generate installation script')
        parser.add_argument('--template', type=str,
                          help='Process template file')

        parsed_args = parser.parse_args(args)

        self.debug = parsed_args.debug
        self.quiet = parsed_args.quiet

        # Apply configuration options
        if parsed_args.prefix:
            self.set_install_prefix(parsed_args.prefix)
        if parsed_args.openssldir:
            self.set_openssl_dir(parsed_args.openssldir)
        if parsed_args.shared:
            self.enable_shared(True)
        if parsed_args.fips:
            self.enable_fips(True)
        if parsed_args.version:
            self.set_version(parsed_args.version)

        if self.debug:
            print("Configuration:")
            for key, value in sorted(self.install_vars.items()):
                print(f"  {key}: {value}")

        # Generate requested outputs
        if parsed_args.makefile_vars:
            output_file = parsed_args.output or 'installvars.mk'
            self.generate_makefile_vars(output_file)
        elif parsed_args.pkgconfig:
            output_file = parsed_args.output or 'openssl.pc'
            self.generate_pkgconfig_file(output_file)
        elif parsed_args.install_script:
            output_file = parsed_args.output or 'install.sh'
            self.generate_install_script(output_file)
        elif parsed_args.template and parsed_args.output:
            self.process_template(parsed_args.template, parsed_args.output)
        else:
            # Default: output variables to stdout
            for key, value in sorted(self.install_vars.items()):
                if isinstance(value, bool):
                    str_value = 'yes' if value else 'no'
                else:
                    str_value = str(value)
                print(f"{key}={str_value}")

        return 0


def main():
    """Main entry point."""
    generator = InstallVarsGenerator()
    sys.exit(generator.run(sys.argv[1:]))


if __name__ == '__main__':
    main()