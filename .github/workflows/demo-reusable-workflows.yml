name: Demo Reusable Workflows

on:
  workflow_dispatch:
    inputs:
      openssl-version:
        description: 'OpenSSL version to build and test'
        required: true
        type: string
        default: '3.2.0'
      platform:
        description: 'Target platform for build'
        required: true
        type: choice
        options:
        - ubuntu-latest
        - macos-latest
        - windows-latest
        default: ubuntu-latest
      fips-enabled:
        description: 'Enable FIPS mode'
        required: false
        type: boolean
        default: false
      test-matrix:
        description: 'Test matrix configuration'
        required: false
        type: string
        default: '{"os": ["ubuntu-latest"], "python-version": ["3.11"], "conan-version": ["2.0"]}'
      publish-to-cloudsmith:
        description: 'Publish to Cloudsmith'
        required: false
        type: boolean
        default: false
      cloudsmith-org:
        description: 'Cloudsmith organization'
        required: false
        type: string
        default: 'sparesparrow'
      cloudsmith-repo:
        description: 'Cloudsmith repository'
        required: false
        type: string
        default: 'openssl-packages'

jobs:
  build-openssl:
    uses: ./.github/workflows/build-openssl.yml@v1
    with:
      version: ${{ inputs.openssl-version }}
      platform: ${{ inputs.platform }}
      fips: ${{ inputs.fips-enabled }}
      build_type: 'Release'
      shared: true
      enable_tests: true
      upload_artifacts: true
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}

  test-integration:
    uses: ./.github/workflows/test-integration.yml@v1
    with:
      openssl-version: ${{ inputs.openssl-version }}
      test-matrix: ${{ inputs.test-matrix }}
      test-type: 'full'
      enable-fuzzing: true
      enable-performance: true
      enable-security-scan: true
      upload-results: true
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}

  publish-raw-package:
    if: inputs.publish-to-cloudsmith == true
    uses: ./.github/workflows/publish-cloudsmith.yml@v1
    with:
      package-name: 'openssl'
      package-version: ${{ inputs.openssl-version }}
      package-type: 'raw'
      repository: ${{ inputs.cloudsmith-repo }}
      organization: ${{ inputs.cloudsmith-org }}
      artifact-path: 'artifacts/'
      distribution: 'any'
      component: 'main'
      architecture: 'amd64'
      tags: 'openssl,security,crypto,ssl,tls'
      description: 'OpenSSL ${{ inputs.openssl-version }} - Open Source SSL/TLS toolkit'
      license: 'OpenSSL'
      homepage: 'https://www.openssl.org/'
      vcs-url: 'https://github.com/openssl/openssl'
      keywords: 'openssl,ssl,tls,crypto,security,encryption'
      publish: true
      wait-for-sync: true
    secrets:
      CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
      CLOUDSMITH_USERNAME: ${{ secrets.CLOUDSMITH_USERNAME }}

  publish-conan-package:
    if: inputs.publish-to-cloudsmith == true
    uses: ./.github/workflows/publish-cloudsmith.yml@v1
    with:
      package-name: 'openssl'
      package-version: ${{ inputs.openssl-version }}
      package-type: 'conan'
      repository: ${{ inputs.cloudsmith-repo }}
      organization: ${{ inputs.cloudsmith-org }}
      artifact-path: 'artifacts/'
      tags: 'openssl,security,crypto,conan'
      description: 'OpenSSL ${{ inputs.openssl-version }} - Conan package'
      license: 'OpenSSL'
      homepage: 'https://www.openssl.org/'
      vcs-url: 'https://github.com/openssl/openssl'
      keywords: 'openssl,ssl,tls,crypto,security,conan'
      publish: true
      wait-for-sync: true
    secrets:
      CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
      CLOUDSMITH_USERNAME: ${{ secrets.CLOUDSMITH_USERNAME }}

  demo-composite-action:
    if: inputs.publish-to-cloudsmith == true
    runs-on: ubuntu-latest
    needs: [build-openssl]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: openssl-${{ inputs.openssl-version }}-${{ inputs.platform }}-*
        path: artifacts/
        
    - name: Publish using composite action
      uses: ./.github/actions/cloudsmith-publish@v1
      with:
        package-name: 'openssl-demo'
        package-version: ${{ inputs.openssl-version }}
        package-type: 'raw'
        repository: ${{ inputs.cloudsmith-repo }}
        organization: ${{ inputs.cloudsmith-org }}
        artifact-path: 'artifacts/'
        distribution: 'any'
        component: 'main'
        architecture: 'amd64'
        tags: 'openssl,demo,composite-action'
        description: 'OpenSSL ${{ inputs.openssl-version }} - Demo package via composite action'
        license: 'OpenSSL'
        homepage: 'https://www.openssl.org/'
        vcs-url: 'https://github.com/openssl/openssl'
        keywords: 'openssl,demo,composite-action'
        publish: true
        wait-for-sync: true
        enable-sbom: true
        enable-security-scan: true
        fail-on-high-severity: true
        api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
        username: ${{ secrets.CLOUDSMITH_USERNAME }}

  generate-summary:
    runs-on: ubuntu-latest
    needs: [build-openssl, test-integration, publish-raw-package, publish-conan-package, demo-composite-action]
    if: always()
    steps:
    - name: Generate workflow summary
      run: |
        cat > workflow-summary.md << 'EOF'
        # Reusable Workflows Demo Summary
        
        ## Configuration
        - **OpenSSL Version**: ${{ inputs.openssl-version }}
        - **Platform**: ${{ inputs.platform }}
        - **FIPS Enabled**: ${{ inputs.fips-enabled }}
        - **Publish to Cloudsmith**: ${{ inputs.publish-to-cloudsmith }}
        
        ## Results
        
        ### Build Results
        - **Build Status**: ${{ needs.build-openssl.result }}
        - **Build Hash**: ${{ needs.build-openssl.outputs.build-hash }}
        - **OpenSSL Version**: ${{ needs.build-openssl.outputs.openssl-version }}
        - **Artifact URL**: ${{ needs.build-openssl.outputs.artifact-url }}
        
        ### Test Results
        - **Integration Tests**: ${{ needs.test-integration.result }}
        - **Test Results URL**: ${{ needs.test-integration.outputs.test-results-url }}
        - **Security Scan Results**: ${{ needs.test-integration.outputs.security-scan-results }}
        
        ### Publishing Results
        - **Raw Package Upload**: ${{ needs.publish-raw-package.result }}
        - **Raw Package URL**: ${{ needs.publish-raw-package.outputs.package-url }}
        - **Conan Package Upload**: ${{ needs.publish-conan-package.result }}
        - **Conan Package URL**: ${{ needs.publish-conan-package.outputs.package-url }}
        - **Composite Action Demo**: ${{ needs.demo-composite-action.result }}
        
        ## Quality Gates
        - **SBOM Generation**: âœ… Enabled in all workflows
        - **Security Scanning**: âœ… Trivy scans with high-severity checks
        - **Multi-platform Testing**: âœ… Matrix testing across OSes
        - **Package Signing**: âœ… Integrated in composite action
        
        ## Next Steps
        1. Check Cloudsmith repositories for published packages
        2. Verify package integrity and signatures
        3. Test package installation from Cloudsmith
        4. Review security scan results
        5. Validate SBOM completeness
        
        ---
        *Generated by Reusable Workflows Demo - $(date)*
        EOF
        
        echo "ðŸ“‹ Workflow Summary Generated:"
        cat workflow-summary.md
        
    - name: Upload summary
      uses: actions/upload-artifact@v4
      with:
        name: workflow-summary
        path: workflow-summary.md
        retention-days: 30
