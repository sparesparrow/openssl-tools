name: Reusable Security Scan (SBOM + Trivy + CodeQL)

on:
    workflow_call:
        inputs:
            artifact-name:
                description: "Name of artifact to scan"
                required: true
                type: string
            language:
                description: "Language for CodeQL (cpp, python)"
                required: false
                type: string
                default: "cpp"
            sbom-format:
                description: "SBOM format (cyclonedx-json, spdx-json)"
                required: false
                type: string
                default: "cyclonedx-json"
            trivy-severity:
                description: "Trivy severity threshold"
                required: false
                type: string
                default: "HIGH,CRITICAL"
            upload-sarif:
                description: "Upload SARIF to GitHub Security"
                required: false
                type: boolean
                default: true
        outputs:
            sbom-path:
                description: "Path to generated SBOM"
                value: ${{ jobs.security-scan.outputs.sbom-path }}
            vulnerabilities-found:
                description: "Number of vulnerabilities found"
                value: ${{ jobs.security-scan.outputs.vulnerabilities-found }}

jobs:
    security-scan:
        runs-on: ubuntu-latest
        permissions:
            actions: read
            contents: read
            security-events: write
        outputs:
            sbom-path: ${{ steps.sbom.outputs.sbom-path }}
            vulnerabilities-found: ${{ steps.trivy.outputs.vulnerabilities-found }}

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Download artifact to scan
              uses: actions/download-artifact@v4
              with:
                  name: ${{ inputs.artifact-name }}
                  path: ./scan-target/

            - name: Generate SBOM with Syft
              id: sbom
              uses: anchore/sbom-action@v0
              with:
                  path: ./scan-target/
                  format: ${{ inputs.sbom-format }}
                  output-file: sbom-${{ inputs.artifact-name }}.json

            - name: Scan with Trivy
              id: trivy
              uses: aquasecurity/trivy-action@master
              with:
                  scan-type: "sbom"
                  input: sbom-${{ inputs.artifact-name }}.json
                  format: "sarif"
                  output: "trivy-results.sarif"
                  severity: ${{ inputs.trivy-severity }}

            - name: Count vulnerabilities
              id: count-vulns
              run: |
                  if [ -f trivy-results.sarif ]; then
                    COUNT=$(jq '[.runs[].results[] | select(.level=="error" or .level=="warning")] | length' trivy-results.sarif 2>/dev/null || echo "0")
                    echo "vulnerabilities-found=${COUNT}" >> $GITHUB_OUTPUT
                    echo "Found ${COUNT} vulnerabilities"
                  else
                    echo "vulnerabilities-found=0" >> $GITHUB_OUTPUT
                  fi

            - name: Upload SARIF to GitHub Security
              if: inputs.upload-sarif && always()
              uses: github/codeql-action/upload-sarif@v3
              with:
                  sarif_file: trivy-results.sarif

            - name: Upload SBOM artifact
              uses: actions/upload-artifact@v4
              with:
                  name: sbom-${{ inputs.artifact-name }}
                  path: sbom-${{ inputs.artifact-name }}.json
                  retention-days: 90

            - name: Set SBOM output
              run: echo "sbom-path=$(pwd)/sbom-${{ inputs.artifact-name }}.json" >> $GITHUB_OUTPUT

    codeql:
        if: inputs.language != ''
        runs-on: ubuntu-latest
        permissions:
            actions: read
            contents: read
            security-events: write

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Initialize CodeQL
              uses: github/codeql-action/init@v3
              with:
                  languages: ${{ inputs.language }}
                  queries: security-and-quality

            - name: Build for CodeQL (C++)
              if: inputs.language == 'cpp'
              run: |
                  if [ -f "Configure" ]; then
                    perl Configure linux-x86_64 --debug
                    make -j$(nproc) 2>/dev/null || make -j1
                  elif [ -f "CMakeLists.txt" ]; then
                    cmake -B build -DCMAKE_BUILD_TYPE=Debug
                    cmake --build build --parallel
                  fi

            - name: Perform CodeQL Analysis
              uses: github/codeql-action/analyze@v3
              with:
                  category: "/language:${{ inputs.language }}"

