name: Security Scanning & FIPS Validation

on:
  push:
    branches: [ main, develop, phase3-fips-security ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  workflow_dispatch:

env:
  CONAN_V2_MODE: 1

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: "Security Scan & Vulnerability Check"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install conan safety bandit semgrep

    - name: Install Conan
      run: |
        pip install "conan>=2.0,<3.0"
        conan --version

    - name: Setup OpenSSL source
      run: |
        if [ ! -d "openssl-source" ]; then
          git clone --depth 1 https://github.com/openssl/openssl.git openssl-source
        fi

    - name: Scan Python dependencies
      run: |
        echo "🔍 Scanning Python dependencies for vulnerabilities..."
        safety check --json --output safety-report.json || true
        safety check --short-report

    - name: Static code analysis
      run: |
        echo "🔍 Running static code analysis..."
        bandit -r scripts/ -f json -o bandit-report.json || true
        bandit -r scripts/ -f txt

    - name: Generate SBOM
      run: |
        echo "📦 Generating Software Bill of Materials..."
        python3 -c "
        import json
        import subprocess
        import os
        
        # Get Conan package info
        result = subprocess.run(['conan', 'list', 'openssl-*:*', '--format=json'], 
                              capture_output=True, text=True)
        
        sbom = {
            'bomFormat': 'CycloneDX',
            'specVersion': '1.4',
            'version': 1,
            'metadata': {
                'timestamp': '$(date -Iseconds)',
                'tools': [
                    {
                        'vendor': 'OpenSSL-Tools',
                        'name': 'Security Scanner',
                        'version': '1.0.0'
                    }
                ],
                'component': {
                    'type': 'application',
                    'name': 'openssl-tools',
                    'version': '3.2.0'
                }
            },
            'components': []
        }
        
        # Add OpenSSL components
        components = [
            {'name': 'openssl-crypto', 'version': '3.2.0', 'type': 'library'},
            {'name': 'openssl-ssl', 'version': '3.2.0', 'type': 'library'},
            {'name': 'openssl-tools', 'version': '3.2.0', 'type': 'application'}
        ]
        
        for comp in components:
            sbom['components'].append({
                'type': comp['type'],
                'name': comp['name'],
                'version': comp['version'],
                'purl': f'pkg:conan/{comp[\"name\"]}@{comp[\"version\"]}'
            })
        
        with open('sbom.json', 'w') as f:
            json.dump(sbom, f, indent=2)
        
        print('✅ SBOM generated: sbom.json')
        "

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          sbom.json
        retention-days: 30

  fips-validation:
    runs-on: ubuntu-latest
    name: "FIPS 140-2 Validation"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Conan
      run: |
        pip install "conan>=2.0,<3.0"
        conan --version

    - name: Setup OpenSSL source
      run: |
        if [ ! -d "openssl-source" ]; then
          git clone --depth 1 https://github.com/openssl/openssl.git openssl-source
        fi

    - name: Build FIPS-enabled components
      run: |
        echo "🔒 Building FIPS-enabled OpenSSL components..."
        
        # Build crypto with FIPS
        cd openssl-crypto
        conan create . --profile:build=fips-linux --profile:host=fips-linux --build=missing -o "*:fips=True" -o "*:enable_fips_module=True"
        
        # Build SSL with FIPS
        cd ../openssl-ssl
        conan create . --profile:build=fips-linux --profile:host=fips-linux --build=missing -o "*:fips=True" -o "*:enable_fips_module=True"
        
        # Build tools with FIPS
        cd ../openssl-tools
        conan create . --profile:build=fips-linux --profile:host=fips-linux --build=missing -o "*:fips=True" -o "*:enable_fips_module=True"

    - name: FIPS validation test
      run: |
        echo "🔒 Running FIPS validation tests..."
        
        # Create test script
        cat > fips_test.py << 'EOF'
        import subprocess
        import sys
        
        def test_fips_availability():
            """Test if FIPS is available in the built OpenSSL"""
            try:
                # Test OpenSSL FIPS availability
                result = subprocess.run(['openssl', 'version', '-fips'], 
                                      capture_output=True, text=True)
                if 'FIPS' in result.stdout:
                    print("✅ FIPS support detected in OpenSSL")
                    return True
                else:
                    print("⚠️  FIPS support not detected")
                    return False
            except Exception as e:
                print(f"❌ FIPS test failed: {e}")
                return False
        
        if test_fips_availability():
            print("🎉 FIPS validation passed!")
            sys.exit(0)
        else:
            print("💥 FIPS validation failed!")
            sys.exit(1)
        EOF
        
        python3 fips_test.py

    - name: Upload FIPS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: fips-builds
        path: ~/.conan2/p/*/p/
        retention-days: 7

  compliance-report:
    needs: [security-scan, fips-validation]
    runs-on: ubuntu-latest
    name: "Generate Compliance Report"
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download security reports
      uses: actions/download-artifact@v4
      with:
        name: security-reports
        path: reports/

    - name: Generate compliance report
      run: |
        echo "📊 Generating compliance report..."
        
        cat > compliance-report.md << 'EOF'
        # OpenSSL-Tools Security & Compliance Report
        
        **Generated:** $(date -Iseconds)
        **Branch:** ${{ github.ref_name }}
        **Commit:** ${{ github.sha }}
        
        ## 🔒 FIPS 140-2 Compliance
        
        - **Status:** ${{ needs.fips-validation.result == 'success' && '✅ PASSED' || '❌ FAILED' }}
        - **Components:** openssl-crypto, openssl-ssl, openssl-tools
        - **Build Profile:** fips-linux
        
        ## 🔍 Security Scanning
        
        - **Dependency Scan:** ${{ needs.security-scan.result == 'success' && '✅ COMPLETED' || '❌ FAILED' }}
        - **Static Analysis:** ${{ needs.security-scan.result == 'success' && '✅ COMPLETED' || '❌ FAILED' }}
        - **SBOM Generation:** ${{ needs.security-scan.result == 'success' && '✅ COMPLETED' || '❌ FAILED' }}
        
        ## 📦 Components
        
        - **openssl-crypto/3.2.0:** Core cryptographic library
        - **openssl-ssl/3.2.0:** SSL/TLS protocol library
        - **openssl-tools/3.2.0:** Command-line utilities
        
        ## 🎯 Compliance Status
        
        | Component | FIPS | Security Scan | Status |
        |-----------|------|---------------|--------|
        | openssl-crypto | ${{ needs.fips-validation.result == 'success' && '✅' || '❌' }} | ${{ needs.security-scan.result == 'success' && '✅' || '❌' }} | ${{ needs.fips-validation.result == 'success' && needs.security-scan.result == 'success' && 'COMPLIANT' || 'NON-COMPLIANT' }} |
        | openssl-ssl | ${{ needs.fips-validation.result == 'success' && '✅' || '❌' }} | ${{ needs.security-scan.result == 'success' && '✅' || '❌' }} | ${{ needs.fips-validation.result == 'success' && needs.security-scan.result == 'success' && 'COMPLIANT' || 'NON-COMPLIANT' }} |
        | openssl-tools | ${{ needs.fips-validation.result == 'success' && '✅' || '❌' }} | ${{ needs.security-scan.result == 'success' && '✅' || '❌' }} | ${{ needs.fips-validation.result == 'success' && needs.security-scan.result == 'success' && 'COMPLIANT' || 'NON-COMPLIANT' }} |
        
        ---
        
        **Report generated by OpenSSL-Tools Security Pipeline**
        EOF
        
        cat compliance-report.md

    - name: Upload compliance report
      uses: actions/upload-artifact@v4
      with:
        name: compliance-report
        path: compliance-report.md
        retention-days: 90
