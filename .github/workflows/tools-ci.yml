name: OpenSSL Tools CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  repository_dispatch:
    types: [openssl-updated]

env:
  PYTHON_VERSIONS: "3.8,3.9,3.10,3.11,3.12"
  CONAN_VERSION: "2.0.17"

jobs:
  test-python-environments:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git build-essential cmake
        
    - name: Test environment setup
      run: |
        python setup_python_env.py --versions ${{ matrix.python-version }}
        python -c "import sys; print(f'Python {sys.version}')"
        
    - name: Install test dependencies
      run: |
        pip install pytest pytest-cov black flake8 mypy
        
    - name: Run linting
      run: |
        black --check .
        flake8 .
        mypy --ignore-missing-imports .
        
    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python-${{ matrix.python-version }}
        
  test-conan-integration:
    runs-on: ubuntu-latest
    needs: test-python-environments
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install Conan
      run: |
        pip install conan==${{ env.CONAN_VERSION }}
        conan --version
        
    - name: Test Conan remote management
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_USERNAME: sparesparrow
      run: |
        python conan_remote_manager.py --setup-ssh
        python conan_remote_manager.py --test
        python conan_remote_manager.py --list
        
    - name: Test build optimization
      run: |
        python build_optimizer.py --stats
        python build_optimizer.py --list
        
    - name: Test package signing
      run: |
        python package_signer.py --install-cosign
        python package_signer.py --generate-key --force
        
  test-fuzz-integration:
    runs-on: ubuntu-latest
    needs: test-python-environments
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install fuzzing dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang llvm afl++
        pip install atheris hypothesis
        
    - name: Test fuzz integration
      run: |
        python fuzz_integration.py --setup
        python fuzz_integration.py --list
        
    - name: Create test fuzz target
      run: |
        mkdir -p test_target
        cat > test_target/test_fuzz.py << 'EOF'
        def process_data(data):
            """Test function for fuzzing."""
            if len(data) > 1000:
                raise ValueError("Data too long")
            if b"crash" in data:
                raise RuntimeError("Crash condition")
            return len(data)
        EOF
        
    - name: Run fuzz test (short duration)
      run: |
        python fuzz_integration.py --fuzz test_target/test_fuzz.py --timeout 60 --max-crashes 5
        
  security-scan:
    runs-on: ubuntu-latest
    needs: test-python-environments
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install security tools
      run: |
        pip install bandit safety semgrep
        
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Run Semgrep scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json
          
  test-integration:
    runs-on: ubuntu-latest
    needs: test-python-environments
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        pip install PyGithub requests gitpython
        
    - name: Test build matrix generator
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python scripts/build_matrix_generator.py \
          --repo sparesparrow/openssl \
          --sha HEAD \
          --output test_matrix.json \
          --reason "integration-test"
          
    - name: Validate matrix output
      run: |
        jq empty test_matrix.json  # Validates JSON
        echo "Matrix contents:"
        cat test_matrix.json
        
    - name: Test status reporter
      run: |
        # Create mock artifacts directory
        mkdir -p test_artifacts/openssl-linux-gcc-release-ubuntu-22.04
        echo '{"status": "success", "build_time": 120, "cache_hit": true, "packages": 5}' > test_artifacts/openssl-linux-gcc-release-ubuntu-22.04/performance_report.json
        
        # Test status reporter (dry run)
        python scripts/status_reporter.py \
          --repo sparesparrow/openssl-tools \
          --sha ${{ github.sha }} \
          --artifacts-dir test_artifacts \
          --reason "integration-test" || echo "Status reporter test completed"
          
    - name: Test performance analyzer
      run: |
        # Create mock Conan output
        echo '{"installed": [{"binary": "Download", "type": "openssl"}], "timestamp": "2024-01-01T00:00:00Z"}' > test_conan_output.json
        
        # Test performance analyzer
        python scripts/performance_analyzer.py \
          --input test_conan_output.json \
          --output test_performance.json \
          --build-time 120
          
        # Validate output
        jq empty test_performance.json
        echo "Performance analysis completed"

  build-and-test:
    runs-on: ubuntu-latest
    needs: [test-conan-integration, test-fuzz-integration, security-scan, test-integration]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        pip install conan==${{ env.CONAN_VERSION }} requests cryptography
        pip install pytest pytest-cov
        
    - name: Set up Conan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python conan_remote_manager.py --setup
        
    - name: Test complete workflow
      run: |
        # Test Python environment setup
        python setup_python_env.py --versions 3.11
        
        # Test build optimization
        python build_optimizer.py --stats
        
        # Test package signing
        python package_signer.py --generate-key --force
        
        # Test fuzz integration
        python fuzz_integration.py --setup
        
    - name: Create test package
      run: |
        mkdir -p test_package
        cat > test_package/conanfile.py << 'EOF'
        from conans import ConanFile
        
        class TestPackageConan(ConanFile):
            name = "test-package"
            version = "1.0"
            description = "Test package for OpenSSL tools"
            settings = "os", "compiler", "build_type", "arch"
            
            def package(self):
                self.copy("*")
                
            def package_info(self):
                self.cpp_info.libs = []
        EOF
        
        # Export and create package
        conan export test_package test-package/1.0@sparesparrow/stable
        conan create test_package test-package/1.0@sparesparrow/stable
        
    - name: Sign and upload package
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Sign the package
        python package_signer.py --sign-dir ~/.conan/data/test-package
        
        # Upload to GitHub Packages
        python conan_remote_manager.py --upload test-package/1.0@sparesparrow/stable
        
    - name: Generate build report
      run: |
        echo "# Build Report" > build_report.md
        echo "## Environment" >> build_report.md
        echo "- Python: $(python --version)" >> build_report.md
        echo "- Conan: $(conan --version)" >> build_report.md
        echo "- OS: $(uname -a)" >> build_report.md
        echo "" >> build_report.md
        echo "## Cache Statistics" >> build_report.md
        python build_optimizer.py --stats >> build_report.md
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          build_report.md
          ~/.openssl-build-cache/
          ~/.openssl-signatures/
          
  notify-completion:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: always()
    
    steps:
    - name: Notify completion
      run: |
        if [ "${{ needs.build-and-test.result }}" == "success" ]; then
          echo "✅ OpenSSL Tools CI completed successfully"
        else
          echo "❌ OpenSSL Tools CI failed"
        fi
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const result = '${{ needs.build-and-test.result }}';
          const emoji = result === 'success' ? '✅' : '❌';
          const message = `${emoji} OpenSSL Tools CI ${result}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });