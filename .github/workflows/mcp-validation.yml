name: MCP Server Validation

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - '.cursor/mcp.json'
      - 'openssl_tools/automation/ai_agents/**'
      - 'scripts/validate_mcp_setup.sh'
      - 'requirements.txt'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - '.cursor/mcp.json'
      - 'openssl_tools/automation/ai_agents/**'
      - 'scripts/validate_mcp_setup.sh'
      - 'requirements.txt'

jobs:
  validate-mcp:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Create virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip

      - name: Install MCP dependencies
        run: |
          source venv/bin/activate
          pip install mcp fastmcp httpx pydantic tenacity psycopg2-binary

      - name: Install project dependencies
        run: |
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Validate MCP configuration
        run: |
          source venv/bin/activate
          ./scripts/validate_mcp_setup.sh

      - name: Test MCP server imports
        run: |
          source venv/bin/activate
          python -c "
          import sys
          sys.path.insert(0, '.')
          from openssl_tools.automation.ai_agents import database_server, build_server, security_server, ci_server, workflow_fixer
          print('✅ All MCP server modules imported successfully')
          "

      - name: Validate JSON configuration
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y jq
          fi
          jq -e '.mcpServers' .cursor/mcp.json
          echo "✅ MCP configuration JSON is valid"

      - name: Check MCP server tool signatures
        run: |
          source venv/bin/activate
          python -c "
          import sys
          sys.path.insert(0, '.')
          import inspect
          from openssl_tools.automation.ai_agents import workflow_fixer

          # Check if FastMCP server class exists
          if hasattr(workflow_fixer, 'app'):
              print('✅ workflow_fixer has FastMCP app')
          else:
              print('⚠️  workflow_fixer missing FastMCP app')

          # Check for tool functions
          tools = [name for name, obj in inspect.getmembers(workflow_fixer)
                  if inspect.isfunction(obj) and not name.startswith('_')]
          print(f'✅ Found {len(tools)} functions in workflow_fixer: {tools[:3]}...')
          "

      - name: Test MCP server instantiation (dry run)
        run: |
          source venv/bin/activate
          timeout 10s python -c "
          import sys
          import os
          sys.path.insert(0, '.')
          os.environ['PYTHONPATH'] = '.'

          try:
              from openssl_tools.automation.ai_agents.workflow_fixer import app
              print('✅ workflow_fixer app instantiated successfully')
          except Exception as e:
              print(f'⚠️  workflow_fixer instantiation failed (expected in CI): {e}')
          "
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mcp-validation-results
          path: |
            *.log
            mcp_*.log
          retention-days: 7