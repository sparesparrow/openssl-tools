name: Reusable Integration Tests

on:
  workflow_call:
    inputs:
      openssl-version:
        description: 'OpenSSL version to test'
        required: true
        type: string
      test-type:
        description: 'Type of test to run'
        required: false
        type: string
        default: 'full'
      platforms:
        description: 'Comma-separated list of platforms to test'
        required: false
        type: string
        default: 'ubuntu-latest,windows-latest,macos-latest'
      python-versions:
        description: 'Comma-separated list of Python versions to test'
        required: false
        type: string
        default: '3.8,3.9,3.10,3.11,3.12'
      conan-version:
        description: 'Conan version to use'
        required: false
        type: string
        default: '2.0.17'
      fips-enabled:
        description: 'Test with FIPS enabled'
        required: false
        type: boolean
        default: false
    outputs:
      test-results:
        description: 'JSON string containing test results'
        value: ${{ jobs.test-results.outputs.results }}
      coverage-report:
        description: 'URL to coverage report'
        value: ${{ jobs.test-results.outputs.coverage-url }}
    secrets:
      GITHUB_TOKEN:
        description: 'GitHub token for artifact access'
        required: true

jobs:
  test-results:
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(format('["{0}"]', join(split(inputs.platforms, ','), '","'))) }}
        python-version: ${{ fromJson(format('["{0}"]', join(split(inputs.python-versions, ','), '","'))) }}
    outputs:
      results: ${{ steps.collect-results.outputs.results }}
      coverage-url: ${{ steps.upload-coverage.outputs.url }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies
      if: matrix.platform == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          git \
          libssl-dev \
          zlib1g-dev \
          pkg-config
          
    - name: Install system dependencies (macOS)
      if: matrix.platform == 'macos-latest'
      run: |
        brew install openssl cmake pkg-config
        
    - name: Install system dependencies (Windows)
      if: matrix.platform == 'windows-latest'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        choco install openssl
        
    - name: Install Conan
      run: |
        pip install conan==${{ inputs.conan-version }}
        conan --version
        
    - name: Configure Conan
      run: |
        conan config init
        conan profile detect --force
        
    - name: Set up test environment
      run: |
        pip install pytest pytest-cov pytest-xdist
        pip install -e .[dev,statistics,github,gitlab]
        
    - name: Download OpenSSL artifacts
      uses: actions/download-artifact@v4
      with:
        name: openssl-${{ inputs.openssl-version }}-${{ matrix.platform }}-${{ inputs.fips-enabled && 'fips' || 'standard' }}
        path: openssl-artifacts/
      continue-on-error: true
      
    - name: Install OpenSSL from artifacts
      if: steps.download-artifacts.outcome == 'success'
      run: |
        if [ -d "openssl-artifacts/openssl" ]; then
          sudo cp -r openssl-artifacts/openssl/* /usr/local/
          sudo ldconfig
        fi
        
    - name: Install OpenSSL from package manager
      if: steps.download-artifacts.outcome != 'success'
      run: |
        if [ "${{ matrix.platform }}" == "ubuntu-latest" ]; then
          sudo apt-get install -y libssl-dev
        elif [ "${{ matrix.platform }}" == "macos-latest" ]; then
          brew install openssl
        elif [ "${{ matrix.platform }}" == "windows-latest" ]; then
          # OpenSSL should be installed via choco
          echo "OpenSSL installed via Chocolatey"
        fi
        
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=openssl_tools --cov-report=xml --cov-report=html
        
    - name: Run integration tests
      run: |
        python test_integration.py --openssl-version ${{ inputs.openssl-version }} --test-type ${{ inputs.test-type }}
        
    - name: Test Conan package creation
      run: |
        conan create . --build=missing
        
    - name: Test Conan package installation
      run: |
        conan install openssl-tools/1.0.0@ --build=missing
        
    - name: Test command line tools
      run: |
        addrev --help
        gitaddrev --help
        ghmerge --help
        stage-release --help
        copyright-year --help
        bn-rand-range --help
        
    - name: Run fuzz tests (if enabled)
      if: inputs.test-type == 'full' || inputs.test-type == 'fuzz-only'
      run: |
        python fuzz_integration.py --setup
        python fuzz_integration.py --fuzz fuzz-targets/ssl_fuzz.py --timeout 300
        python fuzz_integration.py --fuzz fuzz-targets/crypto_fuzz.py --timeout 300
        
    - name: Run performance tests (if enabled)
      if: inputs.test-type == 'full'
      run: |
        python performance_test.py > performance_results.txt
        
    - name: Generate test report
      id: collect-results
      run: |
        # Create test results JSON
        cat > test_results.json << EOF
        {
          "platform": "${{ matrix.platform }}",
          "python_version": "${{ matrix.python-version }}",
          "openssl_version": "${{ inputs.openssl-version }}",
          "test_type": "${{ inputs.test_type }}",
          "fips_enabled": ${{ inputs.fips-enabled }},
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "status": "success"
        }
        EOF
        
        echo "results=$(cat test_results.json | jq -c .)" >> $GITHUB_OUTPUT
        
    - name: Upload coverage report
      id: upload-coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.platform }}-python${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
        retention-days: 30
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.platform }}-python${{ matrix.python-version }}
        path: |
          test_results.json
          performance_results.txt
          fuzz-results/
        retention-days: 30
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.platform }}-python${{ matrix.python-version }}
        path: test_results.json
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    needs: test-results
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install security scanning tools
      run: |
        pip install safety bandit semgrep
        # Install Trivy
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
    - name: Run safety check
      run: |
        safety check --json > safety_results.json || true
        
    - name: Run bandit security linter
      run: |
        bandit -r src/ -f json -o bandit_results.json || true
        
    - name: Run Trivy filesystem scan
      run: |
        trivy fs --format json --output trivy_results.json . || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: |
          safety_results.json
          bandit_results.json
          trivy_results.json
        retention-days: 30