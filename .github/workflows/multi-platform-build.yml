name: Multi-Platform OpenSSL Build

on:
  push:
    branches: [ main, develop, simplify-openssl-build ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CONAN_V2_MODE: 1

jobs:
  build-matrix:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux GCC
          - os: ubuntu-22.04
            compiler: gcc
            compiler_version: "11"
            conan_profile: ci-linux-gcc
            platform: linux-x86_64
            
          # Linux Clang
          - os: ubuntu-22.04
            compiler: clang
            compiler_version: "14"
            conan_profile: ci-linux-clang
            platform: linux-x86_64
            
          # Windows MSVC
          - os: windows-2022
            compiler: msvc
            compiler_version: "193"
            conan_profile: ci-windows-msvc
            platform: windows-x86_64
            
          # macOS Intel
          - os: macos-13
            compiler: clang
            compiler_version: "15"
            conan_profile: ci-macos-x64
            platform: darwin-x86_64
            
          # macOS Apple Silicon
          - os: macos-14
            compiler: clang
            compiler_version: "15"
            conan_profile: ci-macos-arm64
            platform: darwin-arm64

    name: "${{ matrix.platform }} (${{ matrix.compiler }}-${{ matrix.compiler_version }})"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential perl pkg-config

    - name: Install macOS dependencies
      if: runner.os == 'macOS'
      run: |
        brew install perl pkg-config

    - name: Setup Windows build environment
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Install Conan
      run: |
        python -m pip install --upgrade pip
        pip install "conan>=2.0,<3.0"
        conan --version

    - name: Setup Conan profile
      run: |
        conan profile detect --force

    - name: Setup OpenSSL source
      shell: bash
      run: |
        if [ ! -d "openssl-source" ]; then
          git clone --depth 1 https://github.com/openssl/openssl.git openssl-source
        fi
        ls -la openssl-source/Configure

    - name: Cache Conan packages
      uses: actions/cache@v3
      with:
        path: ~/.conan2
        key: conan-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.compiler_version }}-${{ hashFiles('*/conanfile.py') }}
        restore-keys: |
          conan-${{ matrix.os }}-${{ matrix.compiler }}-
          conan-${{ matrix.os }}-

    - name: Build OpenSSL Crypto
      shell: bash
      run: |
        cd openssl-crypto
        conan create . --build=missing -v

    - name: Build OpenSSL SSL
      shell: bash
      run: |
        cd openssl-ssl
        conan create . --build=missing -v

    - name: Build OpenSSL Tools
      shell: bash
      run: |
        cd openssl-tools
        conan create . --build=missing -v

    - name: List built packages
      run: |
        conan list "openssl-*:*"

    - name: Test package consumption
      shell: bash
      run: |
        mkdir -p test-consume
        cd test-consume
        cat > conanfile.txt << EOF
        [requires]
        openssl-crypto/3.2.0
        openssl-ssl/3.2.0
        openssl-tools/3.2.0
        
        [generators]
        CMakeDeps
        CMakeToolchain
        EOF
        conan install . --build=missing
        echo "âœ… Package consumption test passed!"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openssl-${{ matrix.platform }}-${{ matrix.compiler }}
        path: ~/.conan2/p/*/p/
        retention-days: 7

  upload-packages:
    needs: build-matrix
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Conan
      run: pip install "conan>=2.0,<3.0"

    - name: Setup Artifactory
      run: |
        conan remote add artifactory "${{ vars.ARTIFACTORY_URL }}" --force
        conan remote login artifactory "${{ vars.ARTIFACTORY_USER }}" -p "${{ secrets.ARTIFACTORY_TOKEN }}"

    - name: Upload to Artifactory
      run: |
        conan upload "openssl-crypto/3.2.0" -r=artifactory --confirm
        conan upload "openssl-ssl/3.2.0" -r=artifactory --confirm
        conan upload "openssl-tools/3.2.0" -r=artifactory --confirm

