name: OpenSSL Tools CI

on:
  push:
    branches: [main, master, develop, feature/*]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:

env:
  CONAN_USER_HOME: ${{ github.workspace }}/.conan2
  CONAN_COLOR_DISPLAY: 1
  CLICOLOR_FORCE: 1
  CLICOLOR: 1

jobs:
  # Validation stage - runs in parallel
  validate:
    name: Validate Tools
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check: [lint, security-scan, dependency-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Run linting
        if: matrix.check == 'lint'
        run: |
          # Run flake8 for Python code
          python -m flake8 scripts/ --max-line-length=120 --exclude=__pycache__ || true
          python -m flake8 openssl_tools/ --max-line-length=120 --exclude=__pycache__ || true
          
          # Run pylint for Python code
          python -m pylint scripts/ --disable=C0114,C0116 || true
          python -m pylint openssl_tools/ --disable=C0114,C0116 || true
          
      - name: Security scan
        if: matrix.check == 'security-scan'
        run: |
          # Install security scanning tools
          pip install safety bandit
          
          # Scan for known vulnerabilities
          safety check --json --output safety-report.json || true
          
          # Scan for security issues
          bandit -r scripts/ -f json -o bandit-report.json || true
          bandit -r openssl_tools/ -f json -o bandit-tools-report.json || true
          
      - name: Dependency check
        if: matrix.check == 'dependency-check'
        run: |
          # Check Python dependencies
          pip check
          
          # Check if all required files exist
          test -f conanfile.py
          test -f requirements.txt
          test -f pyproject.toml
          
      - name: Upload security reports
        if: matrix.check == 'security-scan'
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
            bandit-tools-report.json

  # Test stage - runs after validation
  test:
    name: Test Tools
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Install Conan
        run: |
          pip install conan==2.21.0
          conan --version
          
      - name: Configure Conan
        run: |
          conan profile detect --force
          conan config set general.revisions_enabled=1
          
      - name: Test Python modules
        run: |
          # Test the main modules
          python -c "import openssl_tools; print('openssl_tools imported successfully')"
          python -c "import openssl_tools.automation; print('automation module imported successfully')"
          python -c "import openssl_tools.security; print('security module imported successfully')"
          
      - name: Test CLI tools
        run: |
          # Test if CLI tools can be imported
          python -c "from openssl_tools.cli import main; print('CLI module imported successfully')"
          
      - name: Test Conan integration
        run: |
          # Test Conan integration if conanfile.py exists
          if [ -f "conanfile.py" ]; then
            conan export . openssl-tools/1.2.0@
            echo "Conan export successful"
          fi
          
      - name: Run unit tests
        run: |
          # Run any existing unit tests
          if [ -d "tests" ]; then
            python -m pytest tests/ -v || echo "Some tests failed, but continuing..."
          else
            echo "No tests directory found, skipping unit tests"
          fi
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}
          path: |
            test_results/
            *.log
          retention-days: 30

  # Build stage - builds Conan packages if applicable
  build:
    name: Build Conan Package
    runs-on: ubuntu-latest
    needs: test
    if: hashFiles('conanfile.py') != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install conan==2.21.0
          
      - name: Configure Conan
        run: |
          conan profile detect --force
          conan config set general.revisions_enabled=1
          
      - name: Build Conan package
        run: |
          # Export the package
          conan export . openssl-tools/1.2.0@
          
          # Create the package
          conan create . openssl-tools/1.2.0@ --build=missing
          
      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: conan-package
          path: |
            ${{ env.CONAN_USER_HOME }}/p/*/p/
          retention-days: 30

  # Security scan stage - comprehensive security analysis
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always() && (needs.test.result == 'success' || needs.build.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'
          
      - name: Install security tools
        run: |
          pip install safety bandit semgrep
          
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results-ubuntu-latest
          path: test-results/
          
      - name: Run comprehensive security scan
        run: |
          # Scan Python code
          bandit -r scripts/ -f json -o bandit-report.json || true
          bandit -r openssl_tools/ -f json -o bandit-tools-report.json || true
          
          # Scan for vulnerabilities
          safety check --json --output safety-report.json || true
          
          # Scan with Semgrep
          semgrep --config=auto scripts/ --json --output=semgrep-report.json || true
          semgrep --config=auto openssl_tools/ --json --output=semgrep-tools-report.json || true
          
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-final
          path: |
            bandit-report.json
            bandit-tools-report.json
            safety-report.json
            semgrep-report.json
            semgrep-tools-report.json
          retention-days: 90

  # Summary stage
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [validate, test, build, security-scan]
    if: always()
    steps:
      - name: Generate CI summary
        run: |
          echo "## OpenSSL Tools CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Validate | ${{ needs.validate.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Repository Type" >> $GITHUB_STEP_SUMMARY
          echo "This is an OpenSSL tools repository, not the OpenSSL source repository." >> $GITHUB_STEP_SUMMARY
          echo "The CI focuses on testing the tooling and Conan integration." >> $GITHUB_STEP_SUMMARY