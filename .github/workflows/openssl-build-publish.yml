# OpenSSL Build & Publish Pipeline with Conan 2
# Builds OpenSSL packages and publishes to configurable remotes

name: OpenSSL Build & Publish

on:
  push:
    branches: [ main, develop, simplify-openssl-build ]
    paths:
      - 'conanfile.py'
      - 'conanfile.txt'
      - 'conan-profiles/**'
      - 'src/**'
      - 'include/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'conanfile.py'
      - 'conanfile.txt'
      - 'conan-profiles/**'
  schedule:
    - cron: '0 6 * * 1'  # Weekly dependency updates
  workflow_dispatch:

# Cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CONAN_VERSION: "2.0.17"
  CONAN_HOME: "${{ github.workspace }}/.conan2"

permissions:
  contents: read
  security-events: write
  packages: write

jobs:

  # Analyze changes to determine what needs to be built
  analyze-changes:
    runs-on: ubuntu-latest
    outputs:
      source-changed: ${{ steps.changes.outputs.source }}
      deps-changed: ${{ steps.changes.outputs.deps }}
      profiles-changed: ${{ steps.changes.outputs.profiles }}
      build-required: ${{ steps.decide.outputs.build-required }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            source:
              - 'src/**'
              - 'include/**'
              - 'CMakeLists.txt'
            deps:
              - 'conanfile.py'
              - 'conanfile.txt'
              - 'conan-profiles/**'
            profiles:
              - 'conan-profiles/**'
              
      - id: decide
        run: |
          if [[ "${{ steps.changes.outputs.source }}" == "true" || 
                "${{ steps.changes.outputs.deps }}" == "true" || 
                "${{ steps.changes.outputs.profiles }}" == "true" ]]; then
            echo "build-required=true" >> $GITHUB_OUTPUT
          else
            echo "build-required=false" >> $GITHUB_OUTPUT
          fi

  # Build packages only when needed (binary-first principle)
  build-packages:
    needs: analyze-changes
    if: needs.analyze-changes.outputs.build-required == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        config:
          - { profile: "linux-gcc11", os: "ubuntu-22.04", container: "gcc:11" }
          - { profile: "abi-strict-clang15", os: "ubuntu-22.04", container: "silkeh/clang:15" }
          - { profile: "macos-clang14", os: "macos-14", container: "" }
          - { profile: "windows-msvc2022", os: "windows-2022", container: "" }
          
    runs-on: ${{ matrix.config.os }}
    container: ${{ matrix.config.container || null }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup container environment
        if: matrix.config.container != ''
        run: |
          apt-get update && apt-get install -y python3-pip git ccache
          
      - name: Setup Python and Conan
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'
        
      - name: Install Conan
        run: |
          pip install conan>=2.0
          conan --version
          
      - name: Setup ccache
        run: |
          if command -v ccache >/dev/null; then
            ccache --version
            ccache --zero-stats
          fi
          
      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ${{ env.CONAN_HOME }}
          key: conan-${{ matrix.config.profile }}-${{ hashFiles('conanfile.py', 'conan-profiles/**') }}
          restore-keys: |
            conan-${{ matrix.config.profile }}-
            
      - name: Cache compiler cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.ccache
            ~/.cache/sccache
          key: ccache-${{ matrix.config.profile }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ matrix.config.profile }}-
            
      - name: Configure Conan
        run: |
          conan profile detect --force
          conan remote add conancenter https://center.conan.io
          
      - name: Clone OpenSSL source
        run: |
          git clone --depth 1 https://github.com/sparesparrow/openssl.git openssl-source
          cp conanfile.py openssl-source/
          echo "OpenSSL source cloned to openssl-source/"

      - name: Validate OpenSSL structure
        run: |
          cd openssl-source
          test -f VERSION.dat || exit 1
          test -f Configure || test -f config || exit 1
          echo "✅ OpenSSL source structure valid"
                             
      - name: Install dependencies
        run: |
          cd openssl-source
          conan install . --profile=../conan-profiles/${{ matrix.config.profile }}.profile \
                         --build=missing
                         
      - name: Build package
        run: |
          cd openssl-source
          conan create . --profile=../conan-profiles/${{ matrix.config.profile }}.profile \
                        --build=missing
                        
      - name: Upload to Conan remote
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        env:
          CONAN_REMOTE_URL: ${{ secrets.CONAN_REMOTE_URL || 'https://maven.pkg.github.com/sparesparrow/openssl-tools' }}
          CONAN_USER: ${{ secrets.CONAN_USER || github.actor }}
          CONAN_PASSWORD: ${{ secrets.CONAN_PASSWORD || secrets.GITHUB_TOKEN }}
        run: |
          cd openssl-source
          conan remote add upload-target "$CONAN_REMOTE_URL" || true
          conan remote login -p "$CONAN_PASSWORD" upload-target "$CONAN_USER" || true
          conan upload "openssl/*" -r=upload-target --confirm || {
            echo "Primary upload failed, attempting GitHub Packages fallback"
            conan remote add github-packages https://maven.pkg.github.com/${{ github.repository }} || true
            conan remote login -p ${{ secrets.GITHUB_TOKEN }} github-packages ${{ github.actor }}
            conan upload "openssl/*" -r=github-packages --confirm
          }
          
      - name: Show ccache stats
        run: |
          if command -v ccache >/dev/null; then
            ccache --show-stats
          fi
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.config.profile }}
          path: |
            ~/.conan2/p/*/p/
          retention-days: 7

      - name: Cursor Agent Failure Analysis
        if: failure() && github.event_name == 'pull_request'
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
        run: |
          if [ -z "$CURSOR_API_KEY" ]; then
            echo "⚠️ CURSOR_API_KEY not set, skipping automated analysis"
            exit 0
          fi
          
          # Construct failure analysis prompt
          PROMPT="Analyze the failed CI job logs for workflow 'openssl-build-publish', job '${{ github.job }}'.
          
          Context:
          - PR: #${{ github.event.pull_request.number }}
          - Commit: ${{ github.sha }}
          - Job: ${{ github.job }}
          - Matrix: ${{ toJson(matrix) }}
          
          Tasks:
          1. Review the job logs above to identify the root cause
          2. Propose a minimal fix (unified diff patch or configuration change)
          3. If the fix is safe and minimal, commit and push the change
          4. Comment on PR #${{ github.event.pull_request.number }} with the analysis and fix
          
          Output your analysis and any changes made."
          
          # Run cursor-agent with timeout
          timeout 300s cursor-agent -p --force "$PROMPT" || {
            echo "⚠️ Cursor agent timed out or failed"
            gh pr comment ${{ github.event.pull_request.number }} \
              --body "❌ CI job **${{ github.job }}** failed. Automated analysis could not complete. Please review logs manually."
          }

  # Security scanning with dependency analysis
  security-scan:
    needs: [analyze-changes, build-packages]
    if: always() && (needs.analyze-changes.outputs.deps-changed == 'true' || github.event_name == 'schedule')
    
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python and Conan
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Install Conan
        run: pip install conan==${{ env.CONAN_VERSION }}
      
      - name: Configure Conan
        run: |
          conan profile detect --force
          conan remote add conancenter https://center.conan.io
          
      - name: Generate dependency graph
        run: |
          conan graph info . --profile=conan-profiles/linux-gcc11.profile \
                            --format=json > dependency-graph.json
                            
      - name: Extract SBOM from packages
        run: |
          conan install . --profile=conan-profiles/linux-gcc11.profile --build=missing
          find ~/.conan2/p/*/p/ -name "sbom.json" -exec cp {} sbom-{}.json \;
          
      - name: Vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'dependency-graph.json'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Upload SBOMs
        uses: actions/upload-artifact@v4
        with:
          name: sbom-files
          path: sbom-*.json

      - name: Cursor Agent Failure Analysis
        if: failure() && github.event_name == 'pull_request'
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
        run: |
          if [ -z "$CURSOR_API_KEY" ]; then
            echo "⚠️ CURSOR_API_KEY not set, skipping automated analysis"
            exit 0
          fi
          
          # Construct failure analysis prompt
          PROMPT="Analyze the failed CI job logs for workflow 'openssl-build-publish', job '${{ github.job }}'.
          
          Context:
          - PR: #${{ github.event.pull_request.number }}
          - Commit: ${{ github.sha }}
          - Job: ${{ github.job }}
          
          Tasks:
          1. Review the job logs above to identify the root cause
          2. Propose a minimal fix (unified diff patch or configuration change)
          3. If the fix is safe and minimal, commit and push the change
          4. Comment on PR #${{ github.event.pull_request.number }} with the analysis and fix
          
          Output your analysis and any changes made."
          
          # Run cursor-agent with timeout
          timeout 300s cursor-agent -p --force "$PROMPT" || {
            echo "⚠️ Cursor agent timed out or failed"
            gh pr comment ${{ github.event.pull_request.number }} \
              --body "❌ CI job **${{ github.job }}** failed. Automated analysis could not complete. Please review logs manually."
          }

  # Test matrix using prebuilt packages (binary-first consumption)
  test-matrix:
    needs: [analyze-changes, build-packages]
    if: always() && needs.build-packages.result == 'success'
    
    strategy:
      fail-fast: false
      matrix:
        config:
          - { profile: "linux-gcc11", os: "ubuntu-22.04" }
          - { profile: "abi-strict-clang15", os: "ubuntu-22.04" }
        build_type: [Release, Debug]
        
    runs-on: ${{ matrix.config.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python and Conan
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Install Conan
        run: pip install conan==${{ env.CONAN_VERSION }}
      
      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ${{ env.CONAN_HOME }}
          key: conan-${{ matrix.config.profile }}-${{ hashFiles('conanfile.py', 'conan-profiles/**') }}
          restore-keys: |
            conan-${{ matrix.config.profile }}-
            
      - name: Configure Conan
        run: |
          conan profile detect --force
          conan remote add conancenter https://center.conan.io
          
      - name: Download lockfile
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.config.profile }}
          path: .
          
      - name: Install prebuilt packages (binary-first)
        run: |
          # Must resolve from remotes - no --build=missing
          conan install . --profile=conan-profiles/${{ matrix.config.profile }}.profile \
                         -s build_type=${{ matrix.build_type }}
                         
      - name: Build and test consumer
        run: |
          conan build . --build-folder=build
          cd build && ctest --output-on-failure
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.config.profile }}-${{ matrix.build_type }}
          path: build/test-results.xml

      - name: Cursor Agent Failure Analysis
        if: failure() && github.event_name == 'pull_request'
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
        run: |
          if [ -z "$CURSOR_API_KEY" ]; then
            echo "⚠️ CURSOR_API_KEY not set, skipping automated analysis"
            exit 0
          fi
          
          # Construct failure analysis prompt
          PROMPT="Analyze the failed CI job logs for workflow 'openssl-build-publish', job '${{ github.job }}'.
          
          Context:
          - PR: #${{ github.event.pull_request.number }}
          - Commit: ${{ github.sha }}
          - Job: ${{ github.job }}
          - Matrix: ${{ toJson(matrix) }}
          
          Tasks:
          1. Review the job logs above to identify the root cause
          2. Propose a minimal fix (unified diff patch or configuration change)
          3. If the fix is safe and minimal, commit and push the change
          4. Comment on PR #${{ github.event.pull_request.number }} with the analysis and fix
          
          Output your analysis and any changes made."
          
          # Run cursor-agent with timeout
          timeout 300s cursor-agent -p --force "$PROMPT" || {
            echo "⚠️ Cursor agent timed out or failed"
            gh pr comment ${{ github.event.pull_request.number }} \
              --body "❌ CI job **${{ github.job }}** failed. Automated analysis could not complete. Please review logs manually."
          }

