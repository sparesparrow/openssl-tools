name: Example Complete Pipeline

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'OpenSSL version to build'
        required: true
        type: string
        default: '3.6.0'
      platform:
        description: 'Target platform'
        required: true
        type: choice
        options:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        default: 'ubuntu-latest'
      fips:
        description: 'Enable FIPS mode'
        required: false
        type: boolean
        default: false
      shared:
        description: 'Build shared libraries'
        required: false
        type: boolean
        default: false
      publish-to-cloudsmith:
        description: 'Publish to Cloudsmith'
        required: false
        type: boolean
        default: false

jobs:
  build:
    name: 🔨 Build OpenSSL
    uses: ./.github/workflows/build-openssl.yml
    with:
      version: ${{ inputs.version }}
      platform: ${{ inputs.platform }}
      fips: ${{ inputs.fips }}
      shared: ${{ inputs.shared }}
      enable-sbom: true
    secrets:
      CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}

  test:
    name: 🧪 Integration Tests
    uses: ./.github/workflows/test-integration.yml
    needs: build
    with:
      test-matrix: |
        {
          "os": ["${{ inputs.platform }}"],
          "profiles": ["default"],
          "versions": ["${{ inputs.version }}"]
        }
      enable-fips-tests: ${{ inputs.fips }}
      enable-cross-platform: true
      upload-results: true

  quality-gates:
    name: 🛡️ Quality Gates
    uses: ./.github/workflows/quality-gates.yml
    needs: build
    with:
      artifact-path: ${{ needs.build.outputs.build-path }}
      artifact-name: ${{ needs.build.outputs.artifact-name }}
      enable-sbom: true
      enable-trivy: true
      fail-on-severity: 'HIGH,CRITICAL'
      upload-sarif: true
      upload-artifacts: true

  publish:
    name: 📦 Publish to Cloudsmith
    uses: ./.github/workflows/publish-cloudsmith.yml
    needs: [build, test, quality-gates]
    if: inputs.publish-to-cloudsmith && needs.quality-gates.outputs.scan-passed == 'true'
    with:
      package-reference: 'openssl/${{ inputs.version }}'
      artifact-path: ${{ needs.build.outputs.build-path }}
      publish-raw-artifacts: true
      tags: 'openssl,conan,ci,automated'
      description: 'OpenSSL ${{ inputs.version }} built via GitHub Actions with FIPS=${{ inputs.fips }}'
    secrets:
      CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}

  summary:
    name: 📊 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [build, test, quality-gates, publish]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "## 🚀 Complete Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: ${{ inputs.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "- **FIPS**: ${{ inputs.fips }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Shared**: ${{ inputs.shared }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Publish**: ${{ inputs.publish-to-cloudsmith }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} | Artifact: ${{ needs.build.outputs.artifact-name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test | ${{ needs.test.result }} | Tests: ${{ needs.test.outputs.passed-tests }}/${{ needs.test.outputs.total-tests }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gates | ${{ needs.quality-gates.result }} | Vulnerabilities: ${{ needs.quality-gates.outputs.vulnerabilities-found }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Publish | ${{ needs.publish.result }} | Success: ${{ needs.publish.outputs.upload-success }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Artifacts" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build.result }}" = "success" ]; then
            echo "- **Build Artifacts**: ${{ needs.build.outputs.artifact-name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Build Path**: ${{ needs.build.outputs.build-path }}" >> $GITHUB_STEP_SUMMARY
            echo "- **SBOM Generated**: ${{ needs.build.outputs.sbom-generated }}" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "- **Package URL**: ${{ needs.publish.outputs.package-url }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Package ID**: ${{ needs.publish.outputs.package-id }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛡️ Security" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.quality-gates.result }}" = "success" ]; then
            echo "- **Vulnerabilities**: ${{ needs.quality-gates.outputs.vulnerabilities-found }}" >> $GITHUB_STEP_SUMMARY
            echo "- **High Severity**: ${{ needs.quality-gates.outputs.high-severity-count }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Critical Severity**: ${{ needs.quality-gates.outputs.critical-severity-count }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Scan Passed**: ${{ needs.quality-gates.outputs.scan-passed }}" >> $GITHUB_STEP_SUMMARY
          fi