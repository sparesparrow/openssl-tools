name: Conan Branch Compilation (Enhanced)

on:
  push:
    branches: ['**']
    paths:
      - 'conanfile.py'
      - 'conanfile.txt'
      - 'conan-recipes/**'
      - 'scripts/conan/**'
      - 'conan-dev/**'
      - 'src/**'
      - 'include/**'
      - 'test/**'
      - 'CMakeLists.txt'
      - 'Makefile'
      - 'configure'
      - 'config'
  workflow_dispatch:

env:
  CONAN_USER_HOME: ${{ github.workspace }}/.conan2
  CONAN_COLOR_DISPLAY: 1
  CLICOLOR_FORCE: 1
  CLICOLOR: 1
  ARTIFACTORY_URL: ${{ secrets.ARTIFACTORY_URL }}
  ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
  ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      openssl-changed: ${{ steps.changes.outputs.openssl }}
      conan-changed: ${{ steps.changes.outputs.conan }}
      tests-changed: ${{ steps.changes.outputs.tests }}
    steps:
      - uses: actions/checkout@v4
      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            openssl:
              - 'crypto/**'
              - 'ssl/**'
              - 'apps/**'
              - 'include/**'
              - 'CMakeLists.txt'
              - 'configure'
              - 'config'
            conan:
              - 'conanfile.py'
              - 'conanfile.txt'
              - 'conan-recipes/**'
            tests:
              - 'test/**'
              - 'fuzz/**'

  compile-changes:
    needs: detect-changes
    if: needs.detect-changes.outputs.openssl == 'true' || needs.detect-changes.outputs.conan == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 3  # Limit parallel jobs to avoid resource exhaustion
      matrix:
        include:
          - name: Linux x86_64 GCC
            os: ubuntu-latest
            profile: linux-gcc11
            conan_options: -o fips=True -o enable_demos=True -o enable_quic=True
            test: true
          - name: Linux x86_64 Clang
            os: ubuntu-latest
            profile: linux-clang15
            conan_options: -o fips=False -o enable_demos=True
            test: true
          - name: Linux ARM64 GCC
            os: ubuntu-24.04-arm
            profile: linux-arm64-gcc
            conan_options: -o fips=True -o enable_ec_nistp_64_gcc_128=True
            test: true
          - name: macOS x86_64
            os: macos-13
            profile: macos-x86_64
            conan_options: -o fips=True -o enable_demos=True
            test: true
          - name: macOS ARM64
            os: macos-14
            profile: macos-arm64
            conan_options: -o fips=True -o enable_demos=True
            test: true
          - name: Minimal Build
            os: ubuntu-latest
            profile: linux-gcc11
            conan_options: -o no_bulk=True -o no_asm=True
            test: true
          - name: No Deprecated
            os: ubuntu-latest
            profile: linux-gcc11
            conan_options: -o fips=True -o no_deprecated=True
            test: true
          - name: Static Build
            os: ubuntu-latest
            profile: linux-gcc11
            conan_options: -o shared=False -o fips=False
            test: true
          - name: Full Featured
            os: ubuntu-latest
            profile: linux-gcc11
            conan_options: -o fips=True -o enable_ktls=True -o enable_zlib=True -o enable_zstd=True -o enable_sctp=True
            test: true
          - name: No Legacy
            os: ubuntu-latest
            profile: linux-gcc11
            conan_options: -o fips=True -o no_legacy=True
            test: true
          - name: Address & UB Sanitizer
            os: ubuntu-latest
            profile: linux-gcc11-debug
            build_type: Debug
            conan_options: -o fips=True -o enable_asan=True -o enable_ubsan=True
            test: true
          - name: Memory Sanitizer
            os: ubuntu-latest
            profile: linux-clang15-debug
            build_type: Debug
            conan_options: -o fips=True -o shared=False -o enable_msan=True
            test: true
          - name: Thread Sanitizer
            os: ubuntu-latest
            profile: linux-clang15-debug
            build_type: Debug
            conan_options: -o fips=False -o shared=False -o enable_tsan=True
            test: false
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Set up Conan Python Environment
        run: |
          python scripts/setup-ci-environment.py
        continue-on-error: false
      
      - name: Pre-build validation
        run: |
          python scripts/validation/pre-build-validation.py --config conan-dev/validation-config.yml
        continue-on-error: false
      
      - name: Cache optimization
        run: |
          python scripts/validation/cache-optimization.py --config conan-dev/cache-optimization.yml
        continue-on-error: true  # Non-critical step
      
      - name: Authentication setup
        run: |
          python scripts/validation/auth-token-manager.py --config conan-dev/package-registries.yml
        continue-on-error: true  # Non-critical step
      
      - name: Conan install (with retry)
        run: |
          for attempt in 1 2 3; do
            echo "Conan install attempt $attempt/3"
            if conan install . --profile=conan-dev/profiles/${{ matrix.profile }}.profile ${{ matrix.conan_options }}; then
              echo "Conan install successful on attempt $attempt"
              break
            else
              echo "Conan install failed on attempt $attempt"
              if [ $attempt -eq 3 ]; then
                echo "All retry attempts failed"
                exit 1
              fi
              echo "Waiting 30 seconds before retry..."
              sleep 30
            fi
          done
        timeout-minutes: 45
      
      - name: Conan build (with retry)
        run: |
          for attempt in 1 2 3; do
            echo "Conan build attempt $attempt/3"
            if conan build . --profile=conan-dev/profiles/${{ matrix.profile }}.profile ${{ matrix.conan_options }}; then
              echo "Conan build successful on attempt $attempt"
              break
            else
              echo "Conan build failed on attempt $attempt"
              if [ $attempt -eq 3 ]; then
                echo "All retry attempts failed"
                exit 1
              fi
              echo "Waiting 30 seconds before retry..."
              sleep 30
            fi
          done
        timeout-minutes: 60
      
      - name: Conan test (with retry)
        if: ${{ matrix.test }}
        run: |
          for attempt in 1 2 3; do
            echo "Conan test attempt $attempt/3"
            if conan test . --profile=conan-dev/profiles/${{ matrix.profile }}.profile ${{ matrix.conan_options }}; then
              echo "Conan test successful on attempt $attempt"
              break
            else
              echo "Conan test failed on attempt $attempt"
              if [ $attempt -eq 3 ]; then
                echo "All retry attempts failed"
                exit 1
              fi
              echo "Waiting 30 seconds before retry..."
              sleep 30
            fi
          done
        timeout-minutes: 30
      
      - name: Upload packages to Artifactory (with retry)
        if: env.ARTIFACTORY_URL != ''
        run: |
          for attempt in 1 2 3; do
            echo "Artifactory upload attempt $attempt/3"
            if conan remote add artifactory ${{ env.ARTIFACTORY_URL }}/conan-local && \
               conan user -p ${{ secrets.ARTIFACTORY_PASSWORD }} -r artifactory ${{ secrets.ARTIFACTORY_USERNAME }} && \
               conan upload "openssl/*" -r=artifactory --all --confirm; then
              echo "Artifactory upload successful on attempt $attempt"
              break
            else
              echo "Artifactory upload failed on attempt $attempt"
              if [ $attempt -eq 3 ]; then
                echo "All retry attempts failed, but continuing..."
                exit 0  # Don't fail the entire job for upload issues
              fi
              echo "Waiting 30 seconds before retry..."
              sleep 30
            fi
          done
        continue-on-error: true
        timeout-minutes: 20
      
      - name: Upload packages to GitHub Packages (with retry)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          for attempt in 1 2 3; do
            echo "GitHub Packages upload attempt $attempt/3"
            if conan remote add github-packages https://maven.pkg.github.com/${{ github.repository }} && \
               conan remote update github-packages https://maven.pkg.github.com/${{ github.repository }} && \
               conan user -p ${{ secrets.GITHUB_TOKEN }} -r github-packages ${{ github.actor }} && \
               conan upload "openssl/*" -r=github-packages --all --confirm --retry=3 --retry-wait=10; then
              echo "GitHub Packages upload successful on attempt $attempt"
              break
            else
              echo "GitHub Packages upload failed on attempt $attempt"
              if [ $attempt -eq 3 ]; then
                echo "All retry attempts failed, but continuing..."
                exit 0  # Don't fail the entire job for upload issues
              fi
              echo "Waiting 30 seconds before retry..."
              sleep 30
            fi
          done
        continue-on-error: true
        timeout-minutes: 20
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: conan-build-${{ matrix.profile }}
          path: |
            build/
            package/
            ~/.conan2/p/*/p/
          retention-days: 30
        continue-on-error: true
      
      - name: Cleanup on failure
        if: failure()
        run: |
          echo "Job failed, performing cleanup..."
          # Clean up any temporary files
          rm -rf build/ package/ || true
          # Log system information for debugging
          echo "System information:"
          uname -a
          df -h
          free -h
        continue-on-error: true

  # Notification job that runs after all compile jobs
  notify-completion:
    needs: [detect-changes, compile-changes]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check job results
        run: |
          if [ "${{ needs.compile-changes.result }}" == "success" ]; then
            echo "✅ All compilation jobs completed successfully"
          elif [ "${{ needs.compile-changes.result }}" == "failure" ]; then
            echo "❌ Some compilation jobs failed"
            echo "Check the workflow logs for details"
          else
            echo "⚠️ Compilation jobs were cancelled or skipped"
          fi
      
      - name: Generate summary
        run: |
          echo "## Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.compile-changes.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: Conan Branch Compilation (Enhanced)" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
