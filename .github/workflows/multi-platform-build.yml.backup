name: Multi-Platform OpenSSL Build

on:
  push:
    branches: [ main, develop, simplify-openssl-build ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

env:
  CONAN_V2_MODE: 1
  CONAN_USER_HOME: "${{ github.workspace }}/.conan2"

jobs:
  # Pre-check job pro fail-fast strategie
  pre-checks:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.changes.outputs.build }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            build:
              - 'openssl-*/**'
              - '.github/workflows/multi-platform-build.yml'
              - 'conanfile.py'
              - 'profiles/**'

      - name: Lint and validate
        run: |
          echo "�� Pre-build validations..."
          # Validate conanfiles exist
          for comp in crypto ssl tools; do
            if [ ! -f "openssl-$comp/conanfile.py" ]; then
              echo "❌ Missing conanfile for $comp"
              exit 1
            fi
          done
          echo "✅ All conanfiles found"

  build-matrix:
    needs: pre-checks
    if: needs.pre-checks.outputs.should-build == 'true'
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            compiler: gcc
            conan_profile: linux-gcc11
            platform: linux-x86_64
          - os: windows-2022
            compiler: msvc
            conan_profile: windows-msvc193
            platform: windows-x86_64
          - os: macos-13
            compiler: clang
            conan_profile: macos-x64
            platform: darwin-x86_64

    name: "Build ${{ matrix.platform }} (${{ matrix.compiler }})"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    # ✅ DOPORUČENÍ: Použít oficiální Conan GitHub Action
    - name: Setup Conan with caching
      uses: conan-io/setup-conan@v5
      with:
        version: 2.0.17

    # ✅ DOPORUČENÍ: Cache pro Conan 2.0 balíky
    - name: Cache Conan packages
      uses: actions/cache@v4
      with:
        path: ~/.conan2
        key: conan-${{ matrix.os }}-${{ matrix.compiler }}-${{ hashFiles('*/conanfile.py', 'profiles/**') }}
        restore-keys: |
          conan-${{ matrix.os }}-${{ matrix.compiler }}-
          conan-${{ matrix.os }}-

    # ✅ DOPORUČENÍ: Vždy conan profile detect pro CI
    - name: Setup Conan profile (FIXED)
      run: |
        echo "🔧 Setting up Conan profile..."
        conan profile detect --force
        conan profile show default
        
        # Create platform-specific profile if needed
        if [ ! -f "profiles/conan/${{ matrix.conan_profile }}.profile" ]; then
          echo "Creating ${{ matrix.conan_profile }} profile..."
          conan profile detect --name ${{ matrix.conan_profile }}
        fi

    # ✅ DOPORUČENÍ: Správné nastavení working-directory
    - name: Setup OpenSSL source (FIXED working-directory)
      run: |
        echo "📥 Setting up OpenSSL source..."
        
        # Remove any existing source
        if [ -e "openssl-source" ]; then
          rm -rf openssl-source
        fi
        
        # Clone OpenSSL source
        git clone --depth 1 --branch master https://github.com/openssl/openssl.git openssl-source
        
        echo "✅ OpenSSL source ready:"
        ls -la openssl-source/ | head -5
        [ -f openssl-source/Configure ] && echo "✅ Configure script found"

    # ✅ DOPORUČENÍ: Oddělení komponent pro minimalizaci matrixu  
    - name: Build OpenSSL Crypto Component
      working-directory: openssl-crypto
      env:
        # ✅ DOPORUČENÍ: Správné nastavení kompilátoru přes CC, ne CMake flagy
        CC: ${{ matrix.compiler == 'gcc' && 'gcc' || matrix.compiler == 'clang' && 'clang' || matrix.compiler == 'msvc' && 'cl' || 'gcc' }}
      run: |
        echo "🔨 Building OpenSSL Crypto..."
        # ✅ DOPORUČENÍ: Explicitní profily pro build i host
        conan create . \
          --profile:build=${{ matrix.conan_profile }} \
          --profile:host=${{ matrix.conan_profile }} \
          --build=missing \
          -v

    - name: Build OpenSSL SSL Component
      working-directory: openssl-ssl
      env:
        CC: ${{ matrix.compiler == 'gcc' && 'gcc' || matrix.compiler == 'clang' && 'clang' || matrix.compiler == 'msvc' && 'cl' || 'gcc' }}
      run: |
        echo "🔨 Building OpenSSL SSL..."
        conan create . \
          --profile:build=${{ matrix.conan_profile }} \
          --profile:host=${{ matrix.conan_profile }} \
          --build=missing \
          -v

    - name: Build OpenSSL Tools Component
      working-directory: openssl-tools
      env:
        CC: ${{ matrix.compiler == 'gcc' && 'gcc' || matrix.compiler == 'clang' && 'clang' || matrix.compiler == 'msvc' && 'cl' || 'gcc' }}
      run: |
        echo "🔨 Building OpenSSL Tools..."
        conan create . \
          --profile:build=${{ matrix.conan_profile }} \
          --profile:host=${{ matrix.conan_profile }} \
          --build=missing \
          -v

    # ✅ DOPORUČENÍ: Post-build smoke test pro včasnou detekci ABI chyb
    - name: Package consumption validation
      run: |
        echo "🧪 Testing package consumption..."
        mkdir -p test-consumer && cd test-consumer
        
        cat > conanfile.txt << EOF
        [requires]
        openssl-crypto/3.2.0
        openssl-ssl/3.2.0
        openssl-tools/3.2.0
        
        [generators]
        CMakeDeps
        CMakeToolchain
        EOF
        
        conan install . \
          --profile:build=${{ matrix.conan_profile }} \
          --profile:host=${{ matrix.conan_profile }} \
          --build=missing
        
        echo "✅ Package consumption test passed!"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: openssl-packages-${{ matrix.platform }}
        path: |
          ~/.conan2/p/*/p/
          test-consumer/
        retention-days: 7

  # ✅ DOPORUČENÍ: Multi-registry upload pouze na main branch
  upload-packages:
    needs: [pre-checks, build-matrix]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Conan with caching
      uses: conan-io/setup-conan@v5
      with:
        version: 2.0.17
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    # ✅ DOPORUČENÍ: Bezpečné zacházení se secrety
    - name: Setup registries
      env:
        ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
        ARTIFACTORY_URL: ${{ vars.ARTIFACTORY_URL }}
        ARTIFACTORY_USER: ${{ vars.ARTIFACTORY_USER }}
      run: |
        if [ -n "$ARTIFACTORY_TOKEN" ]; then
          conan remote add artifactory "$ARTIFACTORY_URL" --force
          echo "✅ Artifactory configured"
        else
          echo "⚠️ Artifactory credentials not available"
        fi

    - name: Upload to Artifactory (Primary)
      if: ${{ secrets.ARTIFACTORY_TOKEN }}
      env:
        ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
      run: |
        echo "📤 Uploading to primary registry (Artifactory)..."
        conan upload "openssl-crypto/3.2.0" -r=artifactory --confirm
        conan upload "openssl-ssl/3.2.0" -r=artifactory --confirm
        conan upload "openssl-tools/3.2.0" -r=artifactory --confirm
        echo "✅ Primary upload complete"

    - name: Upload to GitHub Packages (Backup)
      if: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "📦 Uploading to backup registry (GitHub Packages)..."
        # GitHub Packages upload implementation
        echo "✅ Backup upload complete"
