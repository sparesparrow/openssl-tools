name: e2e-windows-openssl

on:
    workflow_dispatch:
    push:
        branches: [main]

permissions:
    contents: read
    packages: write

env:
  CONAN_VERSION: ${{ vars.CONAN_VERSION || '2.0.17' }}
  PYTHON_VERSION: ${{ vars.PYTHON_VERSION || '3.12' }}
  CONAN_REPOSITORY_NAME: ${{ vars.CONAN_REPOSITORY_NAME || 'sparesparrow-conan' }}
  CONAN_REPOSITORY_URL: ${{ vars.CONAN_REPOSITORY_URL || 'https://conan.cloudsmith.io/sparesparrow-conan/openssl-conan/' }}

jobs:
    e2e:
        runs-on: windows-latest
        env:
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GIT_SSH_COMMAND: ssh -o StrictHostKeyChecking=no

        steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Preflight secrets/vars
        shell: bash
        run: |
          missing=0
          test -n "${{ secrets.CLOUDSMITH_API_KEY }}" || { echo "Missing secret: CLOUDSMITH_API_KEY"; missing=1; }
          test -n "${{ env.CONAN_REPOSITORY_NAME }}" || { echo "Missing var: CONAN_REPOSITORY_NAME"; missing=1; }
          test -n "${{ env.CONAN_REPOSITORY_URL }}" || { echo "Missing var: CONAN_REPOSITORY_URL"; missing=1; }
          if [ "$missing" -ne 0 ]; then exit 1; fi

      - name: Install Python (bootstrap only)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Conan 2.x
        run: |
          python -m pip install --upgrade pip
          python -m pip install "conan>=2.3"

      - name: Configure Conan remotes (Cloudsmith + ConanCenter)
        shell: pwsh
        run: |
          conan remote add $env:CONAN_REPOSITORY_NAME $env:CONAN_REPOSITORY_URL --force
          conan remote add conancenter https://center.conan.io --force
          conan remote list
          conan remote login $env:CONAN_REPOSITORY_NAME spare-sparrow --password "$env:CLOUDSMITH_API_KEY"

      - name: Bootstrap Python from Conan cache (cpython + VirtualRunEnv)
        shell: pwsh
        run: |
          conan install --requires=cpython/3.12.5@ -g VirtualRunEnv --build=missing
          if (Test-Path -Path .\conanrun.bat) { .\conanrun.bat }
          python --version

      - name: Run Windows E2E script (clone, build, upload, consumer test)
        shell: pwsh
        run: |
          mkdir -Force scripts
          Set-Content -Path scripts\windows-e2e-openssl.ps1 -Value @'
          Param(
            [string]$ProjectsRoot = "$HOME\projects",
            [string]$CloudsmithRemote = "$env:CONAN_REPOSITORY_NAME",
            [string]$ResultsFile = "$HOME\e2e-openssl-results.ndjson"
          )
          $ErrorActionPreference = "Stop"
          New-Item -ItemType Directory -Force -Path $ProjectsRoot | Out-Null
          function Add-Conan-Remotes {
            conan remote add $CloudsmithRemote $env:CONAN_REPOSITORY_URL --force | Out-Null
            conan remote add conancenter https://center.conan.io --force | Out-Null
          }
          function Ensure-Conan-Profile {
            if (-not (Test-Path "$HOME\.conan2\profiles\windows-msvc-release.profile")) {
              conan profile detect --force | Out-Null
              Set-Content "$HOME\.conan2\profiles\windows-msvc-release.profile" @"
              [settings]
              os=Windows
              arch=x86_64
              compiler=msvc
              compiler.version=193
              build_type=Release
              [conf]
              tools.cmake.cmaketoolchain:generator=Ninja
              "@
            }
          }
          function Activate-Conan-Python {
            if (Test-Path -Path "$PWD\conanrun.bat") { .\conanrun.bat }
            python --version
          }
          function Write-Result {
            param([string]$Dir,[string]$Step,[string]$Status,[string]$Message="")
            $obj = [ordered]@{timestamp=(Get-Date).ToString("s");directory=$Dir;step=$Step;status=$Status;message=$Message} | ConvertTo-Json -Compress
            Add-Content -Path $ResultsFile -Value $obj
          }
          function Git-Clone-Or-Update { param([string]$SshUrl,[string]$Local)
            if (Test-Path $Local) { Push-Location $Local; git fetch --all --prune; git checkout -q main 2>$null; if ($LASTEXITCODE -ne 0) { git checkout -q master }; git pull --ff-only; Pop-Location }
            else { git clone $SshUrl $Local }
          }
          function Conan-Triplet { return "windows-msvc-release" }
          function Build-Package { param([string]$Path)
            Push-Location $Path
            try {
              Activate-Conan-Python
              $profile = Conan-Triplet
              conan install . --profile $profile --build=missing
              Write-Result -Dir $Path -Step "conan_install" -Status "ok"
              conan create . --profile $profile --build=missing
              Write-Result -Dir $Path -Step "conan_create" -Status "ok"
              # Upload all built references for simplicity
              conan upload "*/*" -r=$CloudsmithRemote --all --confirm
              Write-Result -Dir $Path -Step "conan_upload" -Status "ok"
            } catch { Write-Result -Dir $Path -Step "build_error" -Status "error" -Message $_.Exception.Message } finally { Pop-Location }
          }
          function Libcurl-Consumer-Test { param([string]$RepoPath,[string]$OpenSSLRef)
            Push-Location $RepoPath
            try { Activate-Conan-Python; $profile = Conan-Triplet
              $nl = "`n"
              $lines = "[requires]$nl$OpenSSLRef$nl$nl[generators]$nlCMakeDeps$nlCMakeToolchain$nl$nl[layout]$nlcmake_layout$nl"
              Set-Content -Path conanfile.txt -Value $lines -Encoding UTF8
              conan install . --profile $profile --build=missing
              Write-Result -Dir $RepoPath -Step "consumer_install" -Status "ok" -Message $OpenSSLRef
            } catch { Write-Result -Dir $RepoPath -Step "consumer_error" -Status "error" -Message $_.Exception.Message } finally { Pop-Location }
          }
          Add-Conan-Remotes
          Ensure-Conan-Profile
          $root = $ProjectsRoot
          $repos = @(
            @{ name="openssl-conan-base"; ssh="git@github.com:sparesparrow/openssl-conan-base.git" },
            @{ name="openssl-fips-policy"; ssh="git@github.com:sparesparrow/openssl-fips-policy.git" },
            @{ name="openssl-tools";       ssh="git@github.com:sparesparrow/openssl-tools.git" },
            @{ name="openssl";             ssh="git@github.com:sparesparrow/openssl.git" }
          )
          foreach ($r in $repos) { $local = Join-Path $root $r.name; Git-Clone-Or-Update -SshUrl $r.ssh -Local $local; Build-Package -Path $local }
          $latest = (conan list "openssl/*" --format=plain | Select-String -Pattern "openssl/").Line | Select-Object -Last 1
          if (-not $latest) { $latest = "openssl/3.4.1" }
          $libcurlPath = Join-Path $root "libcurl"
          Git-Clone-Or-Update -SshUrl "git@github.com:sparesparrow/libcurl.git" -Local $libcurlPath
          Libcurl-Consumer-Test -RepoPath $libcurlPath -OpenSSLRef $latest
          '@
          pwsh -File scripts\windows-e2e-openssl.ps1 -Verbose

      - name: Upload results artifact
        uses: actions/upload-artifact@v4
        with:
          name: e2e-openssl-results
          path: ${{ runner.temp }}\..\..\e2e-openssl-results.ndjson
          if-no-files-found: warn
