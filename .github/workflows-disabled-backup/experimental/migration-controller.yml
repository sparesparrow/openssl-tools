name: Migration Controller

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
  workflow_dispatch:
    inputs:
      force_ci_type:
        description: 'Force CI type (conan-only, both-ci, legacy-only)'
        required: false
        type: choice
        options:
          - conan-only
          - both-ci
          - legacy-only
        default: ''

jobs:
  determine-ci-strategy:
    runs-on: ubuntu-latest
    outputs:
      ci_type: ${{ steps.ci-strategy.outputs.ci_type }}
      conan_enabled: ${{ steps.ci-strategy.outputs.conan_enabled }}
      legacy_enabled: ${{ steps.ci-strategy.outputs.legacy_enabled }}
      migration_branch: ${{ steps.ci-strategy.outputs.migration_branch }}
    
    steps:
      - name: Determine CI Strategy
        id: ci-strategy
        run: |
          echo "🔍 Analyzing PR for CI strategy determination..."
          
          # Check if this is a migration branch
          if [ "${{ github.event.pull_request.head.ref }}" = "conan-migration" ]; then
            echo "ci_type=conan-only" >> $GITHUB_OUTPUT
            echo "conan_enabled=true" >> $GITHUB_OUTPUT
            echo "legacy_enabled=false" >> $GITHUB_OUTPUT
            echo "migration_branch=true" >> $GITHUB_OUTPUT
            echo "📦 Migration branch detected - Conan CI only"
            exit 0
          fi
          
          # Check for force override
          if [ -n "${{ github.event.inputs.force_ci_type }}" ]; then
            case "${{ github.event.inputs.force_ci_type }}" in
              "conan-only")
                echo "ci_type=conan-only" >> $GITHUB_OUTPUT
                echo "conan_enabled=true" >> $GITHUB_OUTPUT
                echo "legacy_enabled=false" >> $GITHUB_OUTPUT
                echo "migration_branch=false" >> $GITHUB_OUTPUT
                echo "🔧 Force override: Conan CI only"
                ;;
              "both-ci")
                echo "ci_type=both-ci" >> $GITHUB_OUTPUT
                echo "conan_enabled=true" >> $GITHUB_OUTPUT
                echo "legacy_enabled=true" >> $GITHUB_OUTPUT
                echo "migration_branch=false" >> $GITHUB_OUTPUT
                echo "🔧 Force override: Both CI systems"
                ;;
              "legacy-only")
                echo "ci_type=legacy-only" >> $GITHUB_OUTPUT
                echo "conan_enabled=false" >> $GITHUB_OUTPUT
                echo "legacy_enabled=true" >> $GITHUB_OUTPUT
                echo "migration_branch=false" >> $GITHUB_OUTPUT
                echo "🔧 Force override: Legacy CI only"
                ;;
            esac
            exit 0
          fi
          
          # Check PR labels
          echo "🏷️ Checking PR labels..."
          LABELS="${{ toJson(github.event.pull_request.labels.*.name) }}"
          echo "Labels: $LABELS"
          
          if echo "$LABELS" | grep -q "conan-only"; then
            echo "ci_type=conan-only" >> $GITHUB_OUTPUT
            echo "conan_enabled=true" >> $GITHUB_OUTPUT
            echo "legacy_enabled=false" >> $GITHUB_OUTPUT
            echo "migration_branch=false" >> $GITHUB_OUTPUT
            echo "📦 Label 'conan-only' detected - Conan CI only"
          elif echo "$LABELS" | grep -q "both-ci"; then
            echo "ci_type=both-ci" >> $GITHUB_OUTPUT
            echo "conan_enabled=true" >> $GITHUB_OUTPUT
            echo "legacy_enabled=true" >> $GITHUB_OUTPUT
            echo "migration_branch=false" >> $GITHUB_OUTPUT
            echo "🔄 Label 'both-ci' detected - Both CI systems"
          elif echo "$LABELS" | grep -q "legacy-only"; then
            echo "ci_type=legacy-only" >> $GITHUB_OUTPUT
            echo "conan_enabled=false" >> $GITHUB_OUTPUT
            echo "legacy_enabled=true" >> $GITHUB_OUTPUT
            echo "migration_branch=false" >> $GITHUB_OUTPUT
            echo "🔧 Label 'legacy-only' detected - Legacy CI only"
          else
            # Default behavior - check for Conan-related changes
            echo "🔍 No specific labels found, analyzing changes..."
            
            # Check if this is a Conan-related PR
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              # Get changed files
              CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} 2>/dev/null || echo "")
              
              if echo "$CHANGED_FILES" | grep -q -E "(conanfile\.py|\.conan/|test_package/)"; then
                echo "ci_type=conan-only" >> $GITHUB_OUTPUT
                echo "conan_enabled=true" >> $GITHUB_OUTPUT
                echo "legacy_enabled=false" >> $GITHUB_OUTPUT
                echo "migration_branch=false" >> $GITHUB_OUTPUT
                echo "📦 Conan-related changes detected - Conan CI only"
              else
                echo "ci_type=legacy-only" >> $GITHUB_OUTPUT
                echo "conan_enabled=false" >> $GITHUB_OUTPUT
                echo "legacy_enabled=true" >> $GITHUB_OUTPUT
                echo "migration_branch=false" >> $GITHUB_OUTPUT
                echo "🔧 No Conan changes detected - Legacy CI only"
              fi
            else
              # Default for non-PR events
              echo "ci_type=legacy-only" >> $GITHUB_OUTPUT
              echo "conan_enabled=false" >> $GITHUB_OUTPUT
              echo "legacy_enabled=true" >> $GITHUB_OUTPUT
              echo "migration_branch=false" >> $GITHUB_OUTPUT
              echo "🔧 Default behavior - Legacy CI only"
            fi
          fi
          
          echo "✅ CI Strategy determined: ${{ steps.ci-strategy.outputs.ci_type }}"
          echo "   Conan CI: ${{ steps.ci-strategy.outputs.conan_enabled }}"
          echo "   Legacy CI: ${{ steps.ci-strategy.outputs.legacy_enabled }}"

  comment-pr-status:
    runs-on: ubuntu-latest
    needs: determine-ci-strategy
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Comment PR Status
        uses: actions/github-script@v7
        with:
          script: |
            const ciType = '${{ needs.determine-ci-strategy.outputs.ci_type }}';
            const conanEnabled = '${{ needs.determine-ci-strategy.outputs.conan_enabled }}' === 'true';
            const legacyEnabled = '${{ needs.determine-ci-strategy.outputs.legacy_enabled }}' === 'true';
            const migrationBranch = '${{ needs.determine-ci-strategy.outputs.migration_branch }}' === 'true';
            
            let comment = '## 🎛️ Migration Controller Status\n\n';
            
            if (migrationBranch) {
              comment += '**Branch:** `conan-migration` (Migration Testing)\n';
              comment += '**CI Type:** Conan CI Only\n';
              comment += '**Status:** 🔧 Testing Conan migration\n\n';
            } else {
              comment += `**CI Type:** ${ciType}\n`;
              comment += `**Conan CI:** ${conanEnabled ? '✅ Enabled' : '❌ Disabled'}\n`;
              comment += `**Legacy CI:** ${legacyEnabled ? '✅ Enabled' : '❌ Disabled'}\n\n`;
            }
            
            if (ciType === 'conan-only') {
              comment += '🚀 **Conan CI Only** - Modern package management system\n';
              comment += '- Builds using Conan 2.x with AutotoolsToolchain\n';
              comment += '- Cross-repository CI with openssl-tools\n';
              comment += '- Artifactory integration for caching\n';
              comment += '- FIPS-compliant builds with separate cache\n';
            } else if (ciType === 'both-ci') {
              comment += '🔄 **Both CI Systems** - Parallel execution for comparison\n';
              comment += '- Legacy CI: Traditional build system\n';
              comment += '- Conan CI: Modern package management\n';
              comment += '- Results will be compared for validation\n';
            } else {
              comment += '🔧 **Legacy CI Only** - Traditional build system\n';
              comment += '- Uses existing build workflows\n';
              comment += '- No Conan integration\n';
            }
            
            comment += '\n---\n';
            comment += '**How to change CI type:**\n';
            comment += '- Add label `conan-only` for Conan CI only\n';
            comment += '- Add label `both-ci` for both systems\n';
            comment += '- Add label `legacy-only` for legacy only\n';
            comment += '- Use `conan-migration` branch for testing\n\n';
            comment += '**Migration Progress:**\n';
            comment += '- Phase 1: Feature flags and gradual migration ✅\n';
            comment += '- Phase 2: Parallel execution and validation 🔄\n';
            comment += '- Phase 3: Full migration to Conan CI 📋\n';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  trigger-conan-ci:
    runs-on: ubuntu-latest
    needs: determine-ci-strategy
    if: needs.determine-ci-strategy.outputs.conan_enabled == 'true'
    
    steps:
      - name: Trigger Conan CI
        run: |
          echo "🚀 Triggering Conan CI..."
          echo "CI Type: ${{ needs.determine-ci-strategy.outputs.ci_type }}"
          echo "Conan CI: ${{ needs.determine-ci-strategy.outputs.conan_enabled }}"
          echo "Legacy CI: ${{ needs.determine-ci-strategy.outputs.legacy_enabled }}"
          
          # This would trigger the actual Conan CI workflow
          # For now, we'll just log the action
          echo "✅ Conan CI triggered successfully"

  trigger-legacy-ci:
    runs-on: ubuntu-latest
    needs: determine-ci-strategy
    if: needs.determine-ci-strategy.outputs.legacy_enabled == 'true'
    
    steps:
      - name: Trigger Legacy CI
        run: |
          echo "🔧 Triggering Legacy CI..."
          echo "CI Type: ${{ needs.determine-ci-strategy.outputs.ci_type }}"
          echo "Conan CI: ${{ needs.determine-ci-strategy.outputs.conan_enabled }}"
          echo "Legacy CI: ${{ needs.determine-ci-strategy.outputs.legacy_enabled }}"
          
          # This would trigger the actual Legacy CI workflow
          # For now, we'll just log the action
          echo "✅ Legacy CI triggered successfully"

  migration-summary:
    runs-on: ubuntu-latest
    needs: [determine-ci-strategy, comment-pr-status]
    if: always()
    
    steps:
      - name: Migration Summary
        run: |
          echo "📊 Migration Controller Summary"
          echo "================================"
          echo "CI Type: ${{ needs.determine-ci-strategy.outputs.ci_type }}"
          echo "Conan Enabled: ${{ needs.determine-ci-strategy.outputs.conan_enabled }}"
          echo "Legacy Enabled: ${{ needs.determine-ci-strategy.outputs.legacy_enabled }}"
          echo "Migration Branch: ${{ needs.determine-ci-strategy.outputs.migration_branch }}"
          echo ""
          echo "Next Steps:"
          if [ "${{ needs.determine-ci-strategy.outputs.ci_type }}" = "conan-only" ]; then
            echo "- Conan CI will handle the build process"
            echo "- Results will be reported back to this PR"
          elif [ "${{ needs.determine-ci-strategy.outputs.ci_type }}" = "both-ci" ]; then
            echo "- Both CI systems will run in parallel"
            echo "- Results will be compared for validation"
          else
            echo "- Legacy CI will handle the build process"
            echo "- No Conan integration for this build"
          fi