# Optimized CI - Incremental Enhancement to Existing CI
# This workflow adds intelligent optimizations without breaking existing CI

name: Optimized Basic CI

on:
  push:
    branches: [ main, master, 'release/*' ]
  pull_request:
    branches: [ main, master ]

# Cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  OSSL_RUN_CI_TESTS: 1

jobs:
  # Detect what changed to avoid unnecessary rebuilds
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      source-changed: ${{ steps.changes.outputs.source }}
      docs-only: ${{ steps.changes.outputs.docs-only }}
      tests-changed: ${{ steps.changes.outputs.tests }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            source:
              - 'apps/**'
              - 'crypto/**'
              - 'ssl/**'
              - 'providers/**'
              - 'include/**'
              - 'Configure'
              - 'VERSION.dat'
            docs-only:
              - 'doc/**'
              - '*.md'
            tests:
              - 'test/**'
              - 'fuzz/**'

  # Quick documentation checks (always run, fast)
  check-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: config
        run: ./config --strict-warnings --banner=Configured enable-fips && perl configdata.pm --dump
      - name: make build_generated
        run: make -s build_generated
      - name: make doc-nits
        run: make doc-nits
      - name: make md-nits
        run: |
          sudo gem install mdl
          make md-nits

  # Core build - optimized with caching
  basic-gcc:
    needs: detect-changes
    if: needs.detect-changes.outputs.source-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: checkout fuzz/corpora submodule
        run: git submodule update --init --depth 1 fuzz/corpora
        
      # Cache build artifacts for faster rebuilds
      - name: Cache build directory
        uses: actions/cache@v4
        with:
          path: |
            .
            !.git
          key: build-gcc-${{ hashFiles('Configure', 'VERSION.dat') }}-${{ github.sha }}
          restore-keys: |
            build-gcc-${{ hashFiles('Configure', 'VERSION.dat') }}-
            build-gcc-
            
      - name: localegen
        run: sudo locale-gen tr_TR.UTF-8
      - name: fipsvendor
        run: echo "FIPS_VENDOR=CI" >> VERSION.dat
      - name: config
        run: CC=gcc ./config --strict-warnings --banner=Configured enable-demos enable-h3demo enable-sslkeylog enable-fips enable-quic enable-lms && perl configdata.pm --dump
      - name: make
        run: make -s -j4
      - name: get cpu info
        run: |
          cat /proc/cpuinfo
          ./util/opensslwrap.sh version -c
      - name: make test
        run: .github/workflows/make-test
      - name: check fipsvendor
        run: |
          util/wrap.pl -fips apps/openssl list -providers | grep 'name: CI FIPS Provider for OpenSSL$'
      - name: save artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: "ci@basic-gcc-optimized"
          path: artifacts.tar.gz

  # Core build - Clang
  basic-clang:
    needs: detect-changes
    if: needs.detect-changes.outputs.source-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: checkout fuzz/corpora submodule
        run: git submodule update --init --depth 1 fuzz/corpora
        
      # Cache build artifacts
      - name: Cache build directory
        uses: actions/cache@v4
        with:
          path: |
            .
            !.git
          key: build-clang-${{ hashFiles('Configure', 'VERSION.dat') }}-${{ github.sha }}
          restore-keys: |
            build-clang-${{ hashFiles('Configure', 'VERSION.dat') }}-
            build-clang-
            
      - name: config
        run: CC=clang ./config --strict-warnings --banner=Configured enable-demos enable-h3demo no-fips && perl configdata.pm --dump
      - name: make
        run: make -s -j4
      - name: get cpu info
        run: |
          cat /proc/cpuinfo
          ./util/opensslwrap.sh version -c
      - name: make test
        run: .github/workflows/make-test
      - name: save artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: "ci@basic-clang-optimized"
          path: artifacts.tar.gz

  # Sanitizer builds - only on source changes
  sanitizer-asan-ubsan:
    needs: detect-changes
    if: needs.detect-changes.outputs.source-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: checkout fuzz/corpora submodule
        run: git submodule update --init --depth 1 fuzz/corpora
      - name: Adjust ASLR for sanitizer
        run: |
          sudo cat /proc/sys/vm/mmap_rnd_bits
          sudo sysctl -w vm.mmap_rnd_bits=28
      - name: config
        run: ./config --strict-warnings --banner=Configured --debug enable-asan enable-ubsan enable-rc5 enable-md2 enable-fips && perl configdata.pm --dump
      - name: make
        run: make -s -j4
      - name: make test
        run: .github/workflows/make-test OPENSSL_TEST_RAND_ORDER=0
      - name: save artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: "ci@sanitizer-asan-ubsan"
          path: artifacts.tar.gz

  # Summary job
  ci-summary:
    needs: [detect-changes, check-docs, basic-gcc, basic-clang, sanitizer-asan-ubsan]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: CI Summary
        run: |
          echo "## Optimized CI Results" >> $GITHUB_STEP_SUMMARY
          echo "### Change Detection" >> $GITHUB_STEP_SUMMARY
          echo "- Source changed: ${{ needs.detect-changes.outputs.source-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests changed: ${{ needs.detect-changes.outputs.tests-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation: ${{ needs.check-docs.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- GCC Build: ${{ needs.basic-gcc.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Clang Build: ${{ needs.basic-clang.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Sanitizers: ${{ needs.sanitizer-asan-ubsan.result }}" >> $GITHUB_STEP_SUMMARY
          
          # Fail if any required job failed
          if [[ "${{ needs.check-docs.result }}" == "failure" ]] || 
             [[ "${{ needs.basic-gcc.result }}" == "failure" ]] ||
             [[ "${{ needs.basic-clang.result }}" == "failure" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **CI FAILED**" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **CI PASSED**" >> $GITHUB_STEP_SUMMARY
          fi
