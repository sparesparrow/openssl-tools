name: 🔒 Reusable Security Scan (Enhanced)

on:
  workflow_call:
    inputs:
      scan-path:
        description: 'Path to scan'
        required: false
        default: '.'
        type: string
      severity-threshold:
        description: 'Severity threshold for vulnerability scanning'
        required: false
        default: 'HIGH,CRITICAL'
        type: string
      fail-on-error:
        description: 'Fail workflow on security issues'
        required: false
        default: true
        type: boolean
      generate-sbom:
        description: 'Generate SBOM'
        required: false
        default: true
        type: boolean
      scan-filesystem:
        description: 'Scan filesystem'
        required: false
        default: true
        type: boolean
      scan-dependencies:
        description: 'Scan dependencies'
        required: false
        default: true
        type: boolean
      scan-container:
        description: 'Scan container images'
        required: false
        default: false
        type: boolean
      container-image:
        description: 'Container image to scan'
        required: false
        default: ''
        type: string
    outputs:
      security-status:
        description: 'Security scan status'
        value: ${{ jobs.security-scan.outputs.status }}
      sbom-generated:
        description: 'SBOM generation status'
        value: ${{ jobs.security-scan.outputs.sbom-generated }}
      vulnerabilities-found:
        description: 'Number of vulnerabilities found'
        value: ${{ jobs.security-scan.outputs.vulnerabilities-found }}

jobs:
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      status: ${{ steps.scan-summary.outputs.status }}
      sbom-generated: ${{ steps.sbom-generation.outputs.generated }}
      vulnerabilities-found: ${{ steps.vulnerability-scan.outputs.count }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: "pip"

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml scipy cyclonedx-bom cyclonedx-python-lib

      - name: Generate SBOM
        id: sbom-generation
        if: ${{ inputs.generate-sbom }}
        uses: anchore/sbom-action@v0
        with:
          path: ${{ inputs.scan-path }}
          format: cyclonedx-json
          output-file: security-sbom.json
          fail-on-error: ${{ inputs.fail-on-error }}

      - name: Filesystem Vulnerability Scan
        id: vulnerability-scan
        if: ${{ inputs.scan-filesystem }}
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: ${{ inputs.scan-path }}
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          exit-code: ${{ inputs.fail-on-error && '1' || '0' }}
          severity: ${{ inputs.severity-threshold }}
          fail-on-error: ${{ inputs.fail-on-error }}

      - name: Dependency Scan
        if: ${{ inputs.scan-dependencies }}
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: ${{ inputs.scan-path }}
          format: 'sarif'
          output: 'trivy-deps-results.sarif'
          exit-code: ${{ inputs.fail-on-error && '1' || '0' }}
          severity: ${{ inputs.severity-threshold }}
          fail-on-error: ${{ inputs.fail-on-error }}

      - name: Container Image Scan
        if: ${{ inputs.scan-container && inputs.container-image != '' }}
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          scan-ref: ${{ inputs.container-image }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          exit-code: ${{ inputs.fail-on-error && '1' || '0' }}
          severity: ${{ inputs.severity-threshold }}
          fail-on-error: ${{ inputs.fail-on-error }}

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results-${{ github.run_id }}
          path: |
            security-sbom.json
            trivy-fs-results.sarif
            trivy-deps-results.sarif
            trivy-image-results.sarif
          retention-days: 30

      - name: Security scan summary
        id: scan-summary
        run: |
          echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.generate-sbom }}" == "true" ]; then
            echo "- **SBOM Generated**: ✅ CycloneDX format" >> $GITHUB_STEP_SUMMARY
            echo "sbom-generated=true" >> $GITHUB_OUTPUT
          else
            echo "- **SBOM Generated**: ⏭️ Skipped" >> $GITHUB_STEP_SUMMARY
            echo "sbom-generated=false" >> $GITHUB_OUTPUT
          fi
          
          if [ "${{ inputs.scan-filesystem }}" == "true" ]; then
            echo "- **Filesystem Scan**: ✅ ${{ inputs.severity-threshold }} severity check" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ inputs.scan-dependencies }}" == "true" ]; then
            echo "- **Dependency Scan**: ✅ ${{ inputs.severity-threshold }} severity check" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ inputs.scan-container }}" == "true" ] && [ "${{ inputs.container-image }}" != "" ]; then
            echo "- **Container Scan**: ✅ ${{ inputs.severity-threshold }} severity check" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **Security Status**: ✅ PASSED" >> $GITHUB_STEP_SUMMARY
          echo "status=passed" >> $GITHUB_OUTPUT
          echo "vulnerabilities-found=0" >> $GITHUB_OUTPUT