name: Build Cache Optimization

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  conan-build-with-cache:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, "3.11", "3.12"]
        build-type: [Release, Debug]
        include:
          - python-version: 3.8
            build-type: Release
            enable-ccache: true
            enable-sccache: false
          - python-version: "3.11"
            build-type: Release
            enable-ccache: true
            enable-sccache: false
          - python-version: "3.12"
            build-type: Debug
            enable-ccache: false
            enable-sccache: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better caching
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          ccache \
          sccache \
          cmake \
          ninja-build \
          pkg-config
    
    - name: Set up ccache
      if: matrix.enable-ccache
      uses: actions/cache@v4
      with:
        path: ~/.ccache
        key: ccache-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.build-type }}-${{ hashFiles('**/conanfile.py', '**/setup.py', '**/requirements.txt') }}
        restore-keys: |
          ccache-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.build-type }}-
          ccache-${{ runner.os }}-${{ matrix.python-version }}-
          ccache-${{ runner.os }}-
    
    - name: Set up sccache
      if: matrix.enable-sccache
      uses: actions/cache@v4
      with:
        path: ~/.sccache
        key: sccache-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.build-type }}-${{ hashFiles('**/conanfile.py', '**/setup.py', '**/requirements.txt') }}
        restore-keys: |
          sccache-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.build-type }}-
          sccache-${{ runner.os }}-${{ matrix.python-version }}-
          sccache-${{ runner.os }}-
    
    - name: Set up Conan cache
      uses: actions/cache@v4
      with:
        path: ~/.conan2
        key: conan-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.build-type }}-${{ hashFiles('**/conanfile.py', '**/conan.lock') }}
        restore-keys: |
          conan-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.build-type }}-
          conan-${{ runner.os }}-${{ matrix.python-version }}-
          conan-${{ runner.os }}-
    
    - name: Set up build artifacts cache
      uses: actions/cache@v4
      with:
        path: |
          build/
          dist/
          *.egg-info/
          .pytest_cache/
        key: build-artifacts-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.build-type }}-${{ hashFiles('**/*.py', '**/conanfile.py') }}
        restore-keys: |
          build-artifacts-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.build-type }}-
          build-artifacts-${{ runner.os }}-${{ matrix.python-version }}-
          build-artifacts-${{ runner.os }}-
    
    - name: Install Conan
      run: |
        pip install conan[>=2.0]
        conan config install https://github.com/conan-io/conanclientcert.git
    
    - name: Configure Conan
      run: |
        conan config set general.default_profile=default
        conan profile detect --force
    
    - name: Set up build environment
      run: |
        # Set optimal parallel jobs
        JOBS=$(nproc)
        echo "CONAN_CPU_COUNT=$JOBS" >> $GITHUB_ENV
        echo "MAKEFLAGS=-j$JOBS" >> $GITHUB_ENV
        
        # Set up ccache if enabled
        if [ "${{ matrix.enable-ccache }}" = "true" ]; then
          echo "CCACHE_DIR=~/.ccache" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=5G" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=1" >> $GITHUB_ENV
          echo "CCACHE_HARDLINK=1" >> $GITHUB_ENV
          echo "CCACHE_SLOPPINESS=pch_defines,time_macros" >> $GITHUB_ENV
          echo "CC=ccache gcc" >> $GITHUB_ENV
          echo "CXX=ccache g++" >> $GITHUB_ENV
        fi
        
        # Set up sccache if enabled
        if [ "${{ matrix.enable-sccache }}" = "true" ]; then
          echo "SCCACHE_DIR=~/.sccache" >> $GITHUB_ENV
          echo "SCCACHE_CACHE_SIZE=5G" >> $GITHUB_ENV
          echo "CC=sccache gcc" >> $GITHUB_ENV
          echo "CXX=sccache g++" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
        fi
    
    - name: Conan install Python dependencies
      run: |
        pip install -e .[dev,statistics,github,gitlab]
    
    - name: Conan create package with optimization
      run: |
        conan create . --build=missing \
          -s build_type=${{ matrix.build-type }} \
          -o enable_review_tools=True \
          -o enable_release_tools=True \
          -o enable_statistics=True \
          -o enable_github_integration=True \
          -o enable_gitlab_integration=False \
          -o enable_api_integration=True
    
    - name: Test build artifacts
      run: |
        # Test that the package was created successfully
        conan list "*" --format=json | jq '.[] | select(.name == "openssl-tools")'
        
        # Test command line tools
        addrev --help
        gitaddrev --help
        stage-release --help
        copyright-year --help
        bn-rand-range --help
    
    - name: Cache build statistics
      if: always()
      run: |
        # Collect build statistics
        echo "Build completed at $(date)" >> build-stats.txt
        echo "Python version: ${{ matrix.python-version }}" >> build-stats.txt
        echo "Build type: ${{ matrix.build-type }}" >> build-stats.txt
        echo "CCache enabled: ${{ matrix.enable-ccache }}" >> build-stats.txt
        echo "SCCache enabled: ${{ matrix.enable-sccache }}" >> build-stats.txt
        
        # Get ccache stats if enabled
        if [ "${{ matrix.enable-ccache }}" = "true" ]; then
          echo "CCache statistics:" >> build-stats.txt
          ccache -s >> build-stats.txt
        fi
        
        # Get sccache stats if enabled
        if [ "${{ matrix.enable-sccache }}" = "true" ]; then
          echo "SCCache statistics:" >> build-stats.txt
          sccache --show-stats >> build-stats.txt
        fi
        
        # Get Conan cache stats
        echo "Conan cache statistics:" >> build-stats.txt
        conan cache stats >> build-stats.txt
    
    - name: Upload build statistics
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-stats-${{ matrix.python-version }}-${{ matrix.build-type }}
        path: build-stats.txt
        retention-days: 30

  conan-build-performance-test:
    runs-on: ubuntu-latest
    needs: conan-build-with-cache
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Conan install dependencies
      run: |
        pip install conan
        pip install -e .[dev,statistics,github,gitlab]
    
    - name: Performance test - Clean build
      run: |
        echo "Testing clean build performance..."
        time_start=$(date +%s)
        conan create . --build=missing
        time_end=$(date +%s)
        clean_build_time=$((time_end - time_start))
        echo "Clean build time: ${clean_build_time}s"
        echo "CLEAN_BUILD_TIME=${clean_build_time}" >> $GITHUB_ENV
    
    - name: Performance test - Cached build
      run: |
        echo "Testing cached build performance..."
        time_start=$(date +%s)
        conan create . --build=missing
        time_end=$(date +%s)
        cached_build_time=$((time_end - time_start))
        echo "Cached build time: ${cached_build_time}s"
        echo "CACHED_BUILD_TIME=${cached_build_time}" >> $GITHUB_ENV
    
    - name: Calculate performance improvement
      run: |
        improvement=$(( (CLEAN_BUILD_TIME - CACHED_BUILD_TIME) * 100 / CLEAN_BUILD_TIME ))
        echo "Build time improvement: ${improvement}%"
        echo "Performance improvement: ${improvement}%" >> performance-results.txt
        
        if [ $improvement -gt 50 ]; then
          echo "✅ Excellent caching performance (${improvement}% improvement)"
        elif [ $improvement -gt 25 ]; then
          echo "✅ Good caching performance (${improvement}% improvement)"
        else
          echo "⚠️ Limited caching performance (${improvement}% improvement)"
        fi
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance-results.txt
        retention-days: 30