name: Upload Python Environment to Artifactory

on:
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version to package'
        required: true
        default: '3.12'
      package_version:
        description: 'Package version'
        required: true
        default: 'latest'
      artifactory_repo:
        description: 'Artifactory repository name'
        required: true
        default: 'conan-local'
      include_dev_tools:
        description: 'Include development tools'
        type: boolean
        default: true
      include_testing:
        description: 'Include testing tools'
        type: boolean
        default: true

env:
  CONAN_USER_HOME: ${{ github.workspace }}/.conan2
  CONAN_COLOR_DISPLAY: 1
  CLICOLOR_FORCE: 1
  CLICOLOR: 1

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ github.event.inputs.python_version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ github.event.inputs.python_version }}
          cache: 'pip'
      
      - name: Install Conan
        run: |
          pip install conan>=2.0.0
          conan profile detect --force
      
      - name: Configure Artifactory Remote
        run: |
          conan remote add artifactory ${{ secrets.ARTIFACTORY_URL }}/${{ github.event.inputs.artifactory_repo }}
          conan user -p ${{ secrets.ARTIFACTORY_PASSWORD }} -r artifactory ${{ secrets.ARTIFACTORY_USERNAME }}
      
      - name: Create Python Environment Package Recipe
        run: |
          cat > python-environment-conanfile.py << 'EOF'
          from conan import ConanFile
          from conan.tools.files import copy, save
          import os
          import sys
          from pathlib import Path
          
          class PythonEnvironmentConan(ConanFile):
              name = "openssl-python-environment"
              version = "${{ github.event.inputs.package_version }}"
              description = "OpenSSL Python development environment with Conan tools"
              license = "Apache-2.0"
              url = "https://github.com/openssl/openssl"
              homepage = "https://www.openssl.org"
              topics = ("openssl", "python", "conan", "development", "environment")
              
              settings = "os", "arch", "compiler", "build_type"
              options = {
                  "python_version": ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"],
                  "include_dev_tools": [True, False],
                  "include_testing": [True, False],
              }
              default_options = {
                  "python_version": "${{ github.event.inputs.python_version }}",
                  "include_dev_tools": ${{ github.event.inputs.include_dev_tools }},
                  "include_testing": ${{ github.event.inputs.include_testing }},
              }
              
              def requirements(self):
                  # Require OpenSSL if available
                  try:
                      self.requires("openssl/3.5.0")
                  except:
                      pass  # OpenSSL not required for Python environment
                  
              def build_requirements(self):
                  if self.options.include_dev_tools:
                      self.tool_requires("cmake/[>=3.15]")
                      self.tool_requires("ninja/[>=1.10]")
                      self.tool_requires("pkgconf/[>=1.7]")
                  
              def generate(self):
                  # Create Python environment setup script
                  python_setup = f'''#!/usr/bin/env python{self.options.python_version}
          """
          OpenSSL Python Environment Setup
          Generated by Conan package openssl-python-environment/{self.version}
          """
          
          import os
          import sys
          import subprocess
          from pathlib import Path
          
          def setup_environment():
              """Set up the OpenSSL Python development environment."""
              print("🐍 Setting up OpenSSL Python environment...")
              
              # Get the package directory
              package_dir = Path(__file__).parent
              python_exe = sys.executable
              
              # Install required packages
              requirements = [
                  "conan>=2.0.0",
                  "PyYAML",
                  "pytest",
                  "pytest-cov",
                  "coverage",
                  "black",
                  "flake8",
                  "pylint",
                  "mypy",
                  "isort",
                  "markdown-it",
                  "normalizer",
                  "distro"
              ]
              
              if {str(self.options.include_testing).lower()}:
                  requirements.extend([
                      "pytest-xdist",
                      "pytest-mock",
                      "pytest-benchmark"
                  ])
              
              for package in requirements:
                  try:
                      subprocess.run([python_exe, "-m", "pip", "install", package], 
                                   check=True, capture_output=True)
                      print(f"✅ Installed {{package}}")
                  except subprocess.CalledProcessError as e:
                      print(f"⚠️  Warning: Failed to install {{package}}: {{e}}")
              
              # Set up environment variables
              os.environ['PYTHON_APPLICATION'] = python_exe
              os.environ['CONAN_COLOR_DISPLAY'] = '1'
              os.environ['CLICOLOR_FORCE'] = '1'
              os.environ['CLICOLOR'] = '1'
              
              print("✅ OpenSSL Python environment setup complete!")
              print(f"Python executable: {{python_exe}}")
              print(f"Package version: {self.version}")
          
          if __name__ == "__main__":
              setup_environment()
          '''
                  
                  # Save the setup script
                  save(self, "bin/setup_environment.py", python_setup)
                  
                  # Create a simple README
                  readme = f'''# OpenSSL Python Environment {self.version}
          
          This package provides a complete Python development environment for OpenSSL development with Conan integration.
          
          ## Features
          - Python {self.options.python_version}
          - Conan package manager
          - Development tools: black, flake8, pylint, mypy, isort
          - Testing tools: pytest, pytest-cov, coverage
          - OpenSSL integration scripts
          
          ## Usage
          
          After installing this package, run:
          ```bash
          python bin/setup_environment.py
          ```
          
          This will set up your Python environment with all required tools.
          
          ## Platform
          - OS: {self.settings.os}
          - Architecture: {self.settings.arch}
          - Compiler: {self.settings.compiler}
          - Build Type: {self.settings.build_type}
          '''
                  
                  save(self, "README.md", readme)
                  
                  # Create a requirements.txt
                  requirements_txt = f'''# OpenSSL Python Environment Requirements
          # Generated by openssl-python-environment/{self.version}
          
          conan>=2.0.0
          PyYAML
          pytest
          pytest-cov
          coverage
          black
          flake8
          pylint
          mypy
          isort
          markdown-it
          normalizer
          distro
          '''
                  
                  if self.options.include_testing:
                      requirements_txt += '''
          pytest-xdist
          pytest-mock
          pytest-benchmark
          '''
                  
                  save(self, "requirements.txt", requirements_txt)
          
          def package(self):
              # Copy the generated files
              copy(self, "bin/setup_environment.py", self.build_folder, "bin")
              copy(self, "README.md", self.build_folder, ".")
              copy(self, "requirements.txt", self.build_folder, ".")
              
              # Copy OpenSSL Conan scripts if they exist
              if Path("scripts/openssl_conan").exists():
                  copy(self, "scripts/openssl_conan/**", self.build_folder, "scripts/openssl_conan")
              
              # Copy Conan profiles if they exist
              if Path("conan-dev/profiles").exists():
                  copy(self, "conan-dev/profiles/**", self.build_folder, "conan-dev/profiles")
          
          def package_info(self):
              self.cpp_info.libs = []
              self.cpp_info.includedirs = []
              self.cpp_info.libdirs = []
              
              # Set environment variables
              self.runenv_info.define("PYTHON_APPLICATION", sys.executable)
              self.runenv_info.define("CONAN_COLOR_DISPLAY", "1")
              self.runenv_info.define("CLICOLOR_FORCE", "1")
              self.runenv_info.define("CLICOLOR", "1")
          EOF
      
      - name: Build Python Environment Package
        run: |
          conan create python-environment-conanfile.py --build=missing
      
      - name: Upload to Artifactory
        run: |
          conan upload "openssl-python-environment/${{ github.event.inputs.package_version }}@openssl/stable" -r=artifactory --all --confirm
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-env-${{ github.event.inputs.package_version }}
          path: |
            ~/.conan2/p/*/p/
            python-environment-conanfile.py
      
      - name: Generate installation instructions
        run: |
          cat > installation_instructions.md << 'EOF'
          # Installation Instructions
          
          ## From Artifactory
          
          ```bash
          # Add Artifactory remote
          conan remote add artifactory ${{ secrets.ARTIFACTORY_URL }}/${{ github.event.inputs.artifactory_repo }}
          
          # Install the Python environment package
          conan install openssl-python-environment/${{ github.event.inputs.package_version }}@openssl/stable
          
          # Set up the environment
          python bin/setup_environment.py
          ```
          
          ## Package Details
          - Python Version: ${{ github.event.inputs.python_version }}
          - Package Version: ${{ github.event.inputs.package_version }}
          - Development Tools: ${{ github.event.inputs.include_dev_tools }}
          - Testing Tools: ${{ github.event.inputs.include_testing }}
          - Repository: ${{ github.event.inputs.artifactory_repo }}
          EOF
          
          echo "## Installation Instructions" >> $GITHUB_STEP_SUMMARY
          echo "```bash" >> $GITHUB_STEP_SUMMARY
          echo "conan remote add artifactory ${{ secrets.ARTIFACTORY_URL }}/${{ github.event.inputs.artifactory_repo }}" >> $GITHUB_STEP_SUMMARY
          echo "conan install openssl-python-environment/${{ github.event.inputs.package_version }}@openssl/stable" >> $GITHUB_STEP_SUMMARY
          echo "python bin/setup_environment.py" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY