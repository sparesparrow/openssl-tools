name: Conan Release & Deploy

on:
  push:
    branches: [main, master]
    paths:
      - 'VERSION.dat'
      - 'conanfile.py'
      - 'conanfile.txt'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: 'auto'

env:
  CONAN_USER_HOME: ${{ github.workspace }}/.conan2
  CONAN_COLOR_DISPLAY: 1
  CLICOLOR_FORCE: 1
  CLICOLOR: 1

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should-release: ${{ steps.version.outputs.should-release }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event.inputs.version }}" = "auto" ]; then
            VERSION=$(cat VERSION.dat | tr -d '\n')
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          
          # Check if this is a new version
          if git tag | grep -q "^v$VERSION$"; then
            echo "should-release=false" >> $GITHUB_OUTPUT
          else
            echo "should-release=true" >> $GITHUB_OUTPUT
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "Should release: ${{ steps.version.outputs.should-release }}"

  build-release:
    needs: prepare-release
    if: needs.prepare-release.outputs.should-release == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            profile: linux-gcc11
          - os: ubuntu-22.04
            profile: linux-clang15
          - os: windows-2022
            profile: windows-msvc2022
          - os: macos-12
            profile: macos-clang14
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Set up Conan Python Environment
        run: |
          conan-dev/venv/bin/python scripts/setup-ci-environment.py
          conan-dev/venv/bin/python scripts/setup-ci-environment.py
      
      - name: Pre-build validation
        run: |
          conan-dev/venv/bin/python scripts/validation/pre-build-validation.py --config conan-dev/validation-config.yml --strict
      
      - name: Build release package
        run: |
          conan install . --profile=${{ matrix.profile }}
          conan build . --profile=${{ matrix.profile }}
      
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.profile }}
          path: |
            ~/.conan2/p/*/p/

  deploy-release:
    needs: [prepare-release, build-release]
    if: needs.prepare-release.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install Conan
        run: |
          pip install conan
          conan profile detect --force
      
      - name: Configure remotes
        run: |
          # Configure production remote
          conan remote add production ${{ secrets.CONAN_REMOTE_URL }} || true
          conan remote update production ${{ secrets.CONAN_REMOTE_URL }}
          conan user -p ${{ secrets.CONAN_REMOTE_PASSWORD }} -r production ${{ secrets.CONAN_REMOTE_USERNAME }}
          
          # Configure GitHub Packages as backup
          conan remote add github-packages https://maven.pkg.github.com/${{ github.repository }} || true
          conan user -p ${{ secrets.GITHUB_TOKEN }} -r github-packages ${{ github.actor }}
      
      - name: Upload to production
        run: |
          # Upload to primary production remote
          conan upload "openssl/${{ needs.prepare-release.outputs.version }}@openssl/stable" -r=production --all --confirm --retry=3 --retry-wait=10 || {
            echo "Production upload failed, attempting GitHub Packages backup"
            conan upload "openssl/${{ needs.prepare-release.outputs.version }}@openssl/stable" -r=github-packages --all --confirm --retry=3 --retry-wait=10 || {
              echo "All upload attempts failed"
              exit 1
            }
          }
      
      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }}
          release_name: OpenSSL ${{ needs.prepare-release.outputs.version }}
          body: |
            OpenSSL ${{ needs.prepare-release.outputs.version }} Conan Package
            
            ## Platforms Supported
            - Linux (GCC 11, Clang 15)
            - Windows (MSVC 2022)
            - macOS (Clang 14)
            
            ## Installation
            ```bash
            conan install openssl/${{ needs.prepare-release.outputs.version }}@user/channel
            ```
          draft: false
          prerelease: false