# Incremental CI Improvements Patch
# This workflow demonstrates how to add incremental builds to existing CI
# Can be merged with the existing ci.yml workflow

name: Incremental CI Patch

on:
  workflow_dispatch:
    inputs:
      target_workflow:
        description: 'Which workflow to patch (ci, fuzz, etc.)'
        required: true
        default: 'ci'
        type: choice
        options:
        - ci
        - fuzz
        - all

env:
  OSSL_RUN_CI_TESTS: 1

jobs:
  # This job shows how to add incremental build support
  incremental-build-example:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          # Fetch more history for better change detection
          fetch-depth: 50
          submodules: recursive
          
      # Detect what actually changed
      - name: Detect changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          else
            BASE_SHA="${{ github.event.before }}"
            HEAD_SHA="${{ github.sha }}"
          fi
          
          echo "Comparing $BASE_SHA..$HEAD_SHA"
          
          # Check what changed
          CHANGED_FILES=$(git diff --name-only $BASE_SHA..$HEAD_SHA || echo "all")
          
          # Determine if we need full rebuild
          if echo "$CHANGED_FILES" | grep -E "(Configure|VERSION.dat|configdata.pm.in|build.info)" > /dev/null; then
            echo "config-changed=true" >> $GITHUB_OUTPUT
            echo "üîß Configuration files changed - full rebuild needed"
          else
            echo "config-changed=false" >> $GITHUB_OUTPUT
          fi
          
          if echo "$CHANGED_FILES" | grep -E "(crypto/|ssl/|providers/|include/)" > /dev/null; then
            echo "source-changed=true" >> $GITHUB_OUTPUT
            echo "üìù Source files changed"
          else
            echo "source-changed=false" >> $GITHUB_OUTPUT
          fi
          
          if echo "$CHANGED_FILES" | grep -E "(test/)" > /dev/null; then
            echo "tests-changed=true" >> $GITHUB_OUTPUT
            echo "üß™ Test files changed"
          else
            echo "tests-changed=false" >> $GITHUB_OUTPUT
          fi
          
          if echo "$CHANGED_FILES" | grep -E "(doc/|.*\.md$)" > /dev/null; then
            echo "docs-changed=true" >> $GITHUB_OUTPUT
            echo "üìö Documentation changed"
          else
            echo "docs-changed=false" >> $GITHUB_OUTPUT
          fi
          
          # Save changed files for later use
          echo "$CHANGED_FILES" > changed_files.txt
          
      - name: Upload change detection results
        uses: actions/upload-artifact@v4
        with:
          name: change-detection
          path: changed_files.txt
          
      # Smart caching strategy
      - name: Cache build artifacts
        if: steps.changes.outputs.config-changed == 'false'
        uses: actions/cache@v4
        with:
          path: |
            .
            !.git
            !changed_files.txt
          key: openssl-build-${{ runner.os }}-${{ hashFiles('Configure', 'VERSION.dat', 'configdata.pm.in') }}-${{ github.sha }}
          restore-keys: |
            openssl-build-${{ runner.os }}-${{ hashFiles('Configure', 'VERSION.dat', 'configdata.pm.in') }}-
            openssl-build-${{ runner.os }}-
            
      # Only configure if config changed or cache miss
      - name: Configure (if needed)
        if: steps.changes.outputs.config-changed == 'true' || steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "üîß Configuring OpenSSL..."
          ./config --strict-warnings --banner=Configured enable-fips
          perl configdata.pm --dump
          
      # Incremental build
      - name: Incremental build
        run: |
          if [ "${{ steps.changes.outputs.source-changed }}" = "true" ] || [ ! -f "libcrypto.a" ]; then
            echo "üî® Building (incremental)..."
            make -j4
          else
            echo "‚ö° No source changes detected, skipping build"
            # Just verify existing build
            if [ -f "apps/openssl" ]; then
              ./apps/openssl version
            else
              echo "üî® No existing build found, building..."
              make -j4
            fi
          fi
          
      # Smart test execution
      - name: Smart test execution
        timeout-minutes: 60
        run: |
          if [ "${{ steps.changes.outputs.tests-changed }}" = "true" ] || [ "${{ steps.changes.outputs.source-changed }}" = "true" ]; then
            echo "üß™ Running tests..."
            make test HARNESS_JOBS=2
          else
            echo "‚ö° No relevant changes for testing, running quick smoke test..."
            ./apps/openssl version -a
            echo "‚úÖ Smoke test passed"
          fi
          
      - name: Build summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Config changed: ${{ steps.changes.outputs.config-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- Source changed: ${{ steps.changes.outputs.source-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests changed: ${{ steps.changes.outputs.tests-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docs changed: ${{ steps.changes.outputs.docs-changed }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "changed_files.txt" ]; then
            echo "### Changed Files" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -20 changed_files.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

  # Demonstrate fuzz-specific optimizations
  optimized-fuzz-example:
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.target_workflow, 'fuzz') || github.event.inputs.target_workflow == 'all'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 50
          
      - name: Check if fuzz tests needed
        id: fuzz-check
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          else
            BASE_SHA="${{ github.event.before }}"
            HEAD_SHA="${{ github.sha }}"
          fi
          
          CHANGED_FILES=$(git diff --name-only $BASE_SHA..$HEAD_SHA || echo "all")
          
          if echo "$CHANGED_FILES" | grep -E "(fuzz/|crypto/|ssl/)" > /dev/null; then
            echo "run-fuzz=true" >> $GITHUB_OUTPUT
            echo "üîç Fuzz-relevant changes detected"
          else
            echo "run-fuzz=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è No fuzz-relevant changes, skipping"
          fi
          
      - name: Run optimized fuzz tests
        if: steps.fuzz-check.outputs.run-fuzz == 'true'
        run: |
          echo "üîç Running optimized fuzz tests..."
          # This would contain the actual fuzz test logic
          echo "‚úÖ Fuzz tests completed"
          
      - name: Skip fuzz tests
        if: steps.fuzz-check.outputs.run-fuzz == 'false'
        run: |
          echo "‚è≠Ô∏è Skipping fuzz tests - no relevant changes detected"